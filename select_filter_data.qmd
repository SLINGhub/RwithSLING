# Subset and Reorganize Columns

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
```

## Introduction

A subset is a part of a larger dataset, i.e. selection of rows and columns of a data table.

Functions from the Tidyverse packages (`dplyr` and `tidyr`) will be used in this tutorial. As example data a lipidomics dataset is being used here.

```{r}
#| label: load-lib
#| echo: true
#| message: false
library(here)
library(tidyverse)

mydata <- read_csv(file = here("data/Testdata_wide.csv"))
```

## Select columns

Subset by selecting specific columns using `dplyr::select()`. Use ticks `` ` ` `` when column names contain white spaces. To select a consecutive range of columns use the operator `:`, and to refer to the last column use `last_col()`.

```{r}
#| label: select-1
#| echo: true
#| message: false
mysubset1 <- mydata |> select(DataFileName, SPLType, `CE 14:0`:`CE 22:6`) 
mysubset2 <- mydata |> select(DataFileName, SPLType, `TG 48:0`:last_col()) 

```

## Remove columns

To remove specific columns, add the `!` operator in front of the column name(s)

```{r}
#| label: select-2
#| echo: true
#| message: false
mysubset <- mydata |> 
  select(!VialPosition, !(`CE 14:0`:`CE 24:4`), !`TG 48:0`:last_col()) 

```

## Select columns with specific text in their names

To select columns with a specific string (text) in column names use the `dplyr` functions `contains()`, `starts_with()`, and `ends_with()`:

```{r}
#| label: select-3
#| echo: true
#| message: false

mysubset <- mydata |> select(DataFileName, contains("ISTD")) 
mysubset <- mydata |> select(DataFileName, starts_with("Cer"))
mysubset <- mydata |> select(DataFileName, ends_with(":4")) 
mysubset <- mydata |> select(DataFileName, contains("ISTD") & starts_with("PC"))

# Using regular expressions
mysubset <- mydata |> select(DataFileName, matches("ISTD|^PC")) 

```

## Select columns using text patterns (regular expressions)

To selecting column contain specific text patterns use `matches()`. This function uses [regular expressions](https://cran.r-project.org/web/packages/stringr/vignettes/regular-expressions.html) to match column names. A few key elements in regular expression strings:

-   To search for different strings: `|` (OR operator)
-   Starts with: `^` Ends with: `$`
-   Escape character: `\\`. Symbols as :\|\\/\[\] etc have a function in regular expression, if you want search for them you need add `\\` in front
-   Selections `[ ]` are used to indicate any of the characters is allowed. Use `-` to indicate ranges, and\
    `^` to exclude any of the characters. Examples: `[abcd]`, `[a-d]`, `[1234]`, `[1-4]`, `[^SI]`
-   Dot `.` indicates any character, `\\d` any digit, `\\D` any non-digit, `\\s` any whitespace, `\\S` any non-whitespace
-   Plus `+` means any, and `{`n`}` a defined number n of the preceding characters or symbols.\
    Examples: `[1-9]+`, `[1-9]{6}`, `\\d{6}`, `\\s+`

```{r}
#| label: select-4
#| echo: true
#| message: false
#| include: false
# select PE and PC species (= match either PC or PE)
mydata |> select(DataFileName, matches("^PC|^PE")) 

# select species ending with :4 (e.g. CE 20:4). Need 'escape' the : using \\
mydata |> select(DataFileName, matches("\\:4$")) 

# select PC, PE, PI, PS and PG. Match a P at start and a selection of C,E,I,S,G
mydata |> select(DataFileName, matches("^P[CEISG]"))

# select all PC but not PC O- and PC P- (match PC start, a space, and a digit)
mydata |> select(DataFileName, matches("^PC \\d"))

# select all Cer with with FA chains C14-C18
mydata |> select(DataFileName, matches("^Cer .+/1[4-8]"))
mydata |> select(DataFileName, matches("^Cer d\\d{2}\\:[0-2]\\/1[4-8]"))

```

You can also use select with other functions returning TRUE/FALSE by using `where()`:

```{r}
#| label: select-5
#| echo: true
#| message: false

mysubset <- mydata |> select(DataFileName, where(is.numeric)) 
```

## Reorder columns

Use `relocate()` with the same helper functions as used with `select()`, e.g., `contains():`

```{r}
#| label: select-6
#| echo: true
#| message: false

mydata2 <- mydata |> relocate(SPLType, DataFileName) 
mydata2 <- mydata |> relocate(contains("ISTD"), .before = `CE 14:0`) 
mydata2 <- mydata |> relocate(contains("ISTD"), .after = last_col())
```

Here an example to sort column names alphabetically

```{r}
#| label: select-7
#| echo: true
#| message: false

mydata2 <- mydata |> relocate(order(colnames(mydata)))
```

You can also reorder when using `select()` function. Use `everything()` to add remaining columns

```{r}
#| label: select-8
#| echo: true
#| message: false

mydata2 <- mydata |> select(SPLType, DataFileName, contains("ISTD"), everything()) 
```
