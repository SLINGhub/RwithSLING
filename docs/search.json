[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RwithSLING",
    "section": "",
    "text": "In this online book you will find notes and recipes prepared during the RwithSLING workshop sessions in 2022 at the Singapore Lipidomics Incubator (SLING) @ NUS\nThese RwithSLING workshop sessions are aimed as an applied quick-start into the usage of R in the processing, management and analysis of dataset handled in the lab. Focus is on mass spectrometry (MS)-based lipidomics datasets and study metadata.\nThese notes were prepared before and after workshop sessions, covering topics discussed among the workshop participants. We try to include frequent questions, challenges, pitfalls and possible solutions. The books is structured into two parts, (i) general topics and (ii) specific recipes to specific data processing scenarios in the lab.\nFeedback and contributions are very welcome!"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Following software need to be installed on your computer to work with the examples shown in this online book:\n\nR Version 4.1 (or higher) https://cloud.r-project.org/. Check your R version by running following command in your console: ::: {.cell}\nR.Version()$version.string\n\n#> [1] \"R version 4.2.0 (2022-04-22 ucrt)\"\n\n:::\nRStudio Version 2022.02 or higher https://www.rstudio.com/products/rstudio/download/#download. Check your RStudio version by either looking clicking About RStudio under the menu Help, or by running following command in your console\n\nrstudioapi::versionInfo()$version\n\n\nFollowing software are only needed for specific chapters/examples:\n\nGit https://git-scm.com/downloads\nFor Windows: Rtools <https://cran.r-project.org/bin/windows/Rtools/"
  },
  {
    "objectID": "intro.html#frequently-used-r-packages",
    "href": "intro.html#frequently-used-r-packages",
    "title": "1  Introduction",
    "section": "1.2 Frequently used R packages",
    "text": "1.2 Frequently used R packages\nSee also @ref(Installing R packages)\nFollowing R packages will be often used in the given examples and it is thus recommended to install them before starting with this book\n\nhere\ntidyverse(installs ggplot2, dplyr, tidyr, tibble, readr, forcats, stringr, purrr)\nreadxl\nremotes\n\nRun this in your R command line to install these packages:\n\npkg_list <- c(\"here\", \"tidyverse\", \"readxl\", \"remotes\")\ninstall.packages(pkg_list)"
  },
  {
    "objectID": "import_data.html",
    "href": "import_data.html",
    "title": "2  Import data into R",
    "section": "",
    "text": "Verify the integrity of your data files and imported data - do not just assume all is fine\n\n\n\nData analysis projects often start by importing data from files. It is easier to start with clearly structured, clean and consistent data files:\n\nTidy data: observations (e.g. samples) as rows, variables (e.g. compounds) as columns\nFirst row contains column names\nNo nested columns and rows\nNo text before and after the table\n\nWe will be using readr (from tidyverse) and readxl packages in this chapter:\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)"
  },
  {
    "objectID": "import_data.html#read-csv-files",
    "href": "import_data.html#read-csv-files",
    "title": "2  Import data into R",
    "section": "2.2 Read CSV files",
    "text": "2.2 Read CSV files\nHint: Inspect the summery provided by read_csv() to verify correct data types were assigned\n\nd_wide <- read_csv(file = here(\"data/Testdata_Lipidomics_flat_wide_V2.csv\"), \n                   col_names = TRUE, \n                   trim_ws = TRUE)\n\n#> Rows: 215 Columns: 430\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr    (3): DataFileme, SPLType, VialPosition\n#> dbl  (426): CE 14:0, CE 15:0, CE 16:0, CE 16:1, CE 16:2, CE 17:0, CE 17:1, C...\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo remove white-spaces before and after text, set trim_ws = TRUE."
  },
  {
    "objectID": "import_data.html#read-excel-tables",
    "href": "import_data.html#read-excel-tables",
    "title": "2  Import data into R",
    "section": "2.3 Read Excel tables",
    "text": "2.3 Read Excel tables\nImporting Excel tables can be done via the package s readxl. Note: you will need to define which sheet to import (e.g. below Sheet1).\n\nlibrary(readxl)\nd_wide <- read_xlsx(path = here::here(\"data/Testdata_Lipidomics_flat_wide_V2.xlsx\"),\n                            sheet = \"Sheet1\",\n                            trim_ws = TRUE, \n                            na = c(\"ND\"))\nprint(d_wide)\n\n#> # A tibble: 215 × 432\n#>   DataFileName          AcqTimeStamp SampleType VialPosition `CE 14:0` `CE 15:0`\n#>   <chr>                 <chr>        <chr>      <chr>            <dbl>     <dbl>\n#> 1 001_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1532       515\n#> 2 002_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1029       911\n#> 3 003_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2             685       649\n#> 4 004_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1283       576\n#> 5 005_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2             946       732\n#> 6 006_EBLK_Extracted B… 2018-04-12T… PBLK       P1-A1              132        NA\n#> # … with 209 more rows, and 426 more variables: `CE 16:0` <dbl>,\n#> #   `CE 16:1` <dbl>, `CE 16:2` <dbl>, `CE 17:0` <chr>, `CE 17:1` <dbl>,\n#> #   `CE 18:0` <dbl>, `CE 18:1` <dbl>, `CE 18:1 d7 (ISTD)` <dbl>, …\n\n\n\n\n\n\n\n\nVerify integrity of imported data\n\n\n\n\nDo not assume imported data fine without having reason to do so\nEnsure data types were correctly assigned\nEnsure missing values are correctly handled"
  },
  {
    "objectID": "import_data.html#data-types",
    "href": "import_data.html#data-types",
    "title": "2  Import data into R",
    "section": "2.4 Data Types",
    "text": "2.4 Data Types\n\nNote: read_csv() or read_xlsx() will by default guess the data type of each column.\nTypical data types are numbers (dbl), text (chr), logical (lgl) and factor (fct)\nYou can define the column types already at import (see ?read_csv)."
  },
  {
    "objectID": "import_data.html#missing-values",
    "href": "import_data.html#missing-values",
    "title": "2  Import data into R",
    "section": "2.5 Missing Values",
    "text": "2.5 Missing Values\n\nData files often contain missing values, i.e. as empty cells.\nread_csv() or read_xlsx() assign empty/missing values as NA (Not Available).\nMissing values will in general not affect to data type guessed by read_csv()\nException: Column contains only massing values, in this case it will be of type logical\nHowever, if data files contain specific text values for missing values (e.g.,“ND”,”LOD”, “na”), then read_csv() or read_xlsx() assign the column by default as character (text)\n\nResults from e.g. clinical chemistry, frequently indicate not available data with a short text such as “clotted”, “hemolytic”, “no received” to explain why a value was not reported. What happens when we import such a file using read_csv with default parameters:\n\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_flat_wide_with_differentNA_V2.csv\")\nd_wide <- readr::read_csv(data_file_path, trim_ws = TRUE)\n\n#> Rows: 215 Columns: 432\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (109): DataFileNDme, SampleType, VialPosition, CE 15:0, CE 16:0, CE 17:...\n#> dbl  (320): CE 14:0, CE 16:1, CE 17:1, CE 18:0, CE 18:1, CE 18:1 d7 (ISTD), ...\n#> lgl    (2): CE 16:2, LPC 16:0\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nread_csv() was mislead by the presence of unknown text values and guessed the data types wrongly as <char> for some columns.\nWe also have two columns of the type <lgl>, which stand for logical (TRUE/FALSE). In this case all peak areas of CE 16:2 were missing, and read_csv has no way to guess the intended data type. In which case it chooses <lgl> will be chosen as default.\nWe will not be able to perform any calculations for columns that are text or logical.\nWe need to explicitly tell R which values to interpret as missing values (NA).\nWe can do by providing the na parameter a list of texts that should be interpreted as NA :\n\n\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_flat_wide_with_differentNA_V2.csv\")\nd_wide <- readr::read_csv(data_file_path, \n                          trim_ws = TRUE, \n                          na = c(\"ND\", \"LOD\"))\n\n#> Warning: One or more parsing issues, see `problems()` for details\n\n\n#> Rows: 215 Columns: 432\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr    (3): DataFileNDme, SampleType, VialPosition\n#> dbl  (425): CE 14:0, CE 15:0, CE 16:0, CE 16:1, CE 17:0, CE 17:1, CE 18:0, C...\n#> lgl    (3): CE 16:2, Cer d18:2/24:0, LPC 16:0\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(d_wide)\n\n#> # A tibble: 215 × 432\n#>   DataFileNDme   AcqTimeStamp        SampleType VialPosition `CE 14:0` `CE 15:0`\n#>   <chr>          <dttm>              <chr>      <chr>            <dbl>     <dbl>\n#> 1 001_EQC_TQC p… 2018-04-12 18:28:00 EQC        Vial 2            1532       515\n#> 2 002_EQC_TQC p… 2018-04-12 18:39:00 EQC        Vial 2            1029        NA\n#> 3 003_EQC_TQC p… 2018-04-12 18:51:00 EQC        Vial 2             685       649\n#> 4 004_EQC_TQC p… 2018-04-12 19:02:00 EQC        Vial 2            1283       576\n#> 5 005_EQC_TQC p… 2018-04-12 19:13:00 EQC        Vial 2             946       732\n#> 6 006_EBLK_Extr… 2018-04-12 19:25:00 PBLK       P1-A1              132        NA\n#> # … with 209 more rows, and 426 more variables: `CE 16:0` <dbl>,\n#> #   `CE 16:1` <dbl>, `CE 16:2` <lgl>, `CE 17:0` <dbl>, `CE 17:1` <dbl>,\n#> #   `CE 18:0` <dbl>, `CE 18:1` <dbl>, `CE 18:1 d7 (ISTD)` <dbl>, …"
  },
  {
    "objectID": "import_data.html#other-considerations",
    "href": "import_data.html#other-considerations",
    "title": "2  Import data into R",
    "section": "2.6 Other Considerations",
    "text": "2.6 Other Considerations\n\nWhite spaces or double spaces, White spaces before or after text fields can (and often will) cause issues downstream, therefore I suggest to trim whitespaces, e.g. by setting trim_ws = TRUE"
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "3  Tables in R",
    "section": "",
    "text": "In this chapter we will look at how data is used and managed within R.\n\n\n\nlibrary(here)\nlibrary(tidyverse)\n\n\nBaseggplot2\n\n\n\nplot(cars)\n\n\n\n\n\n\n\nggplot(data = cars, aes(x = speed, y = dist)) + geom_point()"
  },
  {
    "objectID": "tables.html#important-r-data-formats",
    "href": "tables.html#important-r-data-formats",
    "title": "3  Tables in R",
    "section": "3.2 Important R data formats",
    "text": "3.2 Important R data formats\n\n\n\n\n\n\n\n\nType\nDescription\nExample(s)\n\n\n\n\nVector\nVector (series) of values. All values are of the same data type (see below)\nc(1,2,3,4)c(\"TQC\", \"BQC\", \"SPL\")c(TRUE, FALSE)\n\n\nMatrix\n2-dimensional set of values. All values are of the same data type\nmatrix(data = c(1:2),nrow = 2,ncol = 3)matrix(data = c(\"BQC\", \"SPL\"),nrow = 2,ncol = 3)\n\n\nData Frame\nTibble\nTable with columns that can have different data types\ntibble(   No = c(1,2,3),    Sample = c(\"SPL_1\", \"SPL_2\", \"SPL_3\"))\n\n\nList\nSeries of objects\nlist(   Studysite = c(\"NUH\", \"SGH\"),   Cohort =      tibble(No = c(1,2),             Size = c(110,332)   ))"
  },
  {
    "objectID": "tables.html#important-r-data-types",
    "href": "tables.html#important-r-data-types",
    "title": "3  Tables in R",
    "section": "3.3 Important R data types",
    "text": "3.3 Important R data types\n\n\n\n\n\n\n\n\n\nType\nShort\nDescription\nExample(s)\n\n\n\n\nNumeric (double)\n<dbl>\nFloating point number\n3.14159\n\n\nCharacter\n<char>\nCharacter (text) string\n\"S1P d18:1\", \"BQC\"\n\n\nLogical\n<lgl>\nTrue or False, 1 or 0\nTRUE; FALSE\n\n\nInteger\n<int>\nNumber without digits\n3L; 7011L; -13L\n\n\nFactor\n<fct>\nCategorical data\nBQC; TQC; SPL\n\n\n\nMoreover there are data and time types, i.e. date <dt>, time <tm> and datetime <dttm>\nYou can print tables in the console or in R notebook (.Rmd), which will also show the column types:"
  },
  {
    "objectID": "datawrangling.html#introduction",
    "href": "datawrangling.html#introduction",
    "title": "4  Select and plot",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nIn this chapter we will look at how read data from files into R ### Prerequisites\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SLINGtools)"
  },
  {
    "objectID": "datawrangling.html#import-an-agilent-masshunter-csv-file",
    "href": "datawrangling.html#import-an-agilent-masshunter-csv-file",
    "title": "4  Select and plot",
    "section": "4.2 Import an Agilent MassHunter CSV file",
    "text": "4.2 Import an Agilent MassHunter CSV file\n\ndata_file_path <- here(\"data/Testdata_Lipidomics_MHQuant_Detailed_V2.csv\")\n\nd_orig <- read_MassHunterCSV(data_file_path)\n\n#> Reading 'Testdata_Lipidomics_MHQuant_Detailed_V2.csv' ... \n#> \nindexing Testdata_Lipidomics_MHQuant_Detailed_V2.csv [=====-] 2.15GB/s, eta:  0s\nindexing Testdata_Lipidomics_MHQuant_Detailed_V2.csv [======] 2.15GB/s, eta:  0s\n                                                                                \nImported  215 samples with 428 transitions\n\nprint(d_orig)\n\n#> # A tibble: 92,020 × 14\n#>   DataFileName      DataName SampleType AcqTimeStamp        VialPosition Feature\n#>   <chr>             <chr>    <chr>      <dttm>              <chr>        <chr>  \n#> 1 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 14:0\n#> 2 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 15:0\n#> 3 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:0\n#> 4 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:1\n#> 5 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:2\n#> 6 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 17:0\n#> # … with 92,014 more rows, and 8 more variables: IonPolarity <fct>,\n#> #   PrecursorMZ <dbl>, ProductMZ <dbl>, CollisionEnergy <dbl>, RT <dbl>,\n#> #   Area <dbl>, FWHM <dbl>, MI <lgl>"
  },
  {
    "objectID": "datawrangling.html#select-remove-re-order-and-rename-columns",
    "href": "datawrangling.html#select-remove-re-order-and-rename-columns",
    "title": "4  Select and plot",
    "section": "4.3 Select, remove, re-order, and rename columns",
    "text": "4.3 Select, remove, re-order, and rename columns\nUse the function select()\n\nd <- d_orig |> \n  dplyr::select(AnalysisID = \"DataFileName\", \n                QCtype = SampleType,\n                Compound = Feature, \n                Intensity = Area,\n                RT,\n                PrecursorMZ)\nprint(d)\n\n#> # A tibble: 92,020 × 6\n#>   AnalysisID              QCtype Compound Intensity    RT PrecursorMZ\n#>   <chr>                   <chr>  <chr>        <dbl> <dbl>       <dbl>\n#> 1 001_EQC_TQC prerun 01.d EQC    CE 14:0       1532  6.98        615.\n#> 2 001_EQC_TQC prerun 01.d EQC    CE 15:0        515  7.13        629.\n#> 3 001_EQC_TQC prerun 01.d EQC    CE 16:0     127953  7.16        643.\n#> 4 001_EQC_TQC prerun 01.d EQC    CE 16:1      40374  7.00        641.\n#> 5 001_EQC_TQC prerun 01.d EQC    CE 16:2       1340  6.82        639.\n#> 6 001_EQC_TQC prerun 01.d EQC    CE 17:0       7227  7.22        657.\n#> # … with 92,014 more rows"
  },
  {
    "objectID": "datawrangling.html#filter-rows",
    "href": "datawrangling.html#filter-rows",
    "title": "4  Select and plot",
    "section": "4.4 Filter rows",
    "text": "4.4 Filter rows\nUse the function filter().\n\nd |> filter(AnalysisID == \"149_BQC_PQC17.d \")\nd |> filter(AnalysisID == \"149-bQC_PQC17.d\", Compound == \"TG 48:1 [-18:1]\")\nd |> filter(QCtype == \"BQC\")\nd |> filter(QCtype == \"BQC\" | QCtype == \"TQC\" )\nd |> filter(QCtype == \"BQC\" & QCtype == \"TQC\" )\nd |> filter(QCtype %in% c(\"BQC\", \"TQC\"))"
  },
  {
    "objectID": "datawrangling.html#lets-finally-plot",
    "href": "datawrangling.html#lets-finally-plot",
    "title": "4  Select and plot",
    "section": "4.5 Let’s finally plot",
    "text": "4.5 Let’s finally plot\n\n# For this we take one single sample, let's say a  BQC\nd_plot <- d |> \n  filter(AnalysisID == \"066_BQC_PQC07.d\")\n\n# Base R\nplot(x = d_plot$PrecursorMZ, y = d_plot$RT)\n\n# ggplot\nggplot(d_plot, aes(x = PrecursorMZ, y = RT)) +\n  geom_point(size = 2, color = \"blue\")\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#split-column-to-get-lipid-class",
    "href": "datawrangling.html#split-column-to-get-lipid-class",
    "title": "4  Select and plot",
    "section": "4.6 Split column to get lipid class",
    "text": "4.6 Split column to get lipid class\n\nd_plot_wclass <- d_plot |> \n  separate(\n    col = Compound,\n    into = c(\"lipidclass\", \"chain\"), \n    sep = \" \",\n    extra = \"merge\", \n    remove = FALSE) \n    \nd_plot_wclass\n\n#> # A tibble: 428 × 8\n#>   AnalysisID      QCtype Compound lipidclass chain Intensity    RT PrecursorMZ\n#>   <chr>           <chr>  <chr>    <chr>      <chr>     <dbl> <dbl>       <dbl>\n#> 1 066_BQC_PQC07.d BQC    CE 14:0  CE         14:0       1152  6.98        615.\n#> 2 066_BQC_PQC07.d BQC    CE 15:0  CE         15:0        984  7.06        629.\n#> 3 066_BQC_PQC07.d BQC    CE 16:0  CE         16:0      93268  7.16        643.\n#> 4 066_BQC_PQC07.d BQC    CE 16:1  CE         16:1      51054  7.01        641.\n#> 5 066_BQC_PQC07.d BQC    CE 16:2  CE         16:2       1870  6.83        639.\n#> 6 066_BQC_PQC07.d BQC    CE 17:0  CE         17:0       9050  7.22        657.\n#> # … with 422 more rows"
  },
  {
    "objectID": "datawrangling.html#now-lets-plot-again",
    "href": "datawrangling.html#now-lets-plot-again",
    "title": "4  Select and plot",
    "section": "4.7 Now let’s plot again",
    "text": "4.7 Now let’s plot again\n\n# ggplot\nggplot(d_plot_wclass, aes(x = PrecursorMZ, y = RT, color = lipidclass)) +\n  geom_point(size = 2)\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#another-time",
    "href": "datawrangling.html#another-time",
    "title": "4  Select and plot",
    "section": "4.8 … another time",
    "text": "4.8 … another time\n\n# ggplot\nggplot(d_plot_wclass, aes(x = PrecursorMZ, y = RT, color = lipidclass, size = Intensity/10)) +\n  geom_point()\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#comparisons-in-r",
    "href": "datawrangling.html#comparisons-in-r",
    "title": "4  Select and plot",
    "section": "4.9 Comparisons in R",
    "text": "4.9 Comparisons in R\nRun following lines and try understand the result\n\n\"CE 18:1\" == \"CE 18:1\"\n\"CE 18:1\" == \"CE 18:1 \"\n\"CE 18:1\" == \"CE  18:1\"\n\"Ce 18:1\" == \"CE 18:1\"\n\nstringr::str_trim(\"CE 18:1 \")\nstringr::str_trim(\"   CE    18:1 \")\nstringr::str_squish(\"   CE    18:1 \")\n\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"IS\")\nstringr::str_detect(\"LPC 18:1 (ISTD)\", pattern = \"IS\")\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"ISTD\")\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"LPC\")\n\nstringr::str_replace(\"Acylcarnitine 18:1\", \n                     pattern = \"Acylcarnitine\",\n                     replacement = \"CAR\")\n\nstringr::str_replace(\"TG 48:2 [SIM] Results\", \n                     pattern = \" Results\",\n                     replacement = \"\")\n\nstringr::str_replace(\"112_BQC_A9334.d\", \n                     pattern = \".d\",\n                     replacement = \"\")\n\nstringr::str_to_lower(\"CE 18:1\")\n\nSample_ID <- 1\ntry(Sample-ID <- 1)\n\n# d |> filter(AnalysisID == \"149_BQC_PQC17.d\", \n#                    str_detect(Compound, \"IS|LPI\") )\n# \n# d |> filter(str_detect(AnalysisID, \"BQC|TQC\") , \n#                    str_detect(Compound, \"IS\")) -> temp"
  },
  {
    "objectID": "datawrangling.html#convert-long-table-to-wide-table-format",
    "href": "datawrangling.html#convert-long-table-to-wide-table-format",
    "title": "4  Select and plot",
    "section": "4.10 Convert long table to wide table format",
    "text": "4.10 Convert long table to wide table format\n\n# d_area_temp <- d |> \n#   pivot_wider(names_from = \"Compound\" ,values_from = \"Area\")\n\n\n# d_BQC <- d_area |> filter(QCtype == \"BQC\")\n# \n# \n# d_res1 <- d_BQC |>\n#   summarise(\n#     across(.cols = -seq_no:-AcqTimeStamp,\n#            .fns = ~ sd(.)/mean(.)*100)\n#   )\n# d_res1\n# \n# d_BQC_areas <- d_BQC |> dplyr::select(-seq_no:-AcqTimeStamp)\n\n# d_res2 <- purrr::map_df(d_BQC_areas, .f = ~ sd(.)/mean(.)*100)\n# d_res2\n# \n# d_res3 <- sapply(X = d_BQC_areas, \n#                  FUN = function(x) c(CV = sd(x)/mean(x) * 100,\n#                                      RobustCV = mad(x)/median(x) * 100))\n# as.data.frame(d_res3)\n# as.data.frame(t(d_res3))\n# \n# d_BQC_long <- d_BQC |> pivot_longer(cols = -seq_no:-AcqTimeStamp,\n#                                     names_to = \"Compound\",\n#                                     values_to = \"Area\")\n# \n# d_BQC_stats <- d_BQC_long |> \n#   group_by(Compound) |> \n#   summarise(\n#     count = n(),\n#     Mean = mean(Area),\n#     Min = min(Area),\n#     CV = sd(Area)/mean(Area) *100,\n#     logCV = sqrt(exp(1)^(sd(log(Area))^2)-1) *100,\n#     logCV_roche = sqrt(10^(log(10)*sd(log(Area, 10))^2)-1) *100,\n#     rCVq = 0.75 * IQR(Area, na.rm = TRUE)/median(Area) *100,\n#     rCVm = mad(Area, constant = 1.4826)/median(Area) *100\n#   )\n# d_BQC_stats\n# \n# hist(d_BQC_stats$CV)\n# hist(d_BQC_stats$rCVm)\n# \n# ggplot(d_BQC_stats) +\n#   geom_histogram(aes(x=CV))\n# \n# d_BQC_stats_long <- d_BQC_stats |>\n#   dplyr:::select(Compound, CV,rCVm,,rCVq, logCV) |> \n#   pivot_longer(cols = -Compound, names_to= \"CV_type\" ,values_to = \"Value\")\n# d_BQC_stats_long\n# \n# ggplot(d_BQC_stats_long) +\n#   geom_histogram(aes(x=Value, fill = CV_type)) + scale_x_continuous(limits = c(0,150)) + facet_wrap(~CV_type)\n# \n# \n# plot(d_BQC_stats$CV, d_BQC_stats$logCV)\n# plot(d_BQC_stats$CV, d_BQC_stats$logCV, xlim = c(0,100), ylim = c(0,100))\n# plot(d_BQC_stats$CV, d_BQC_stats$rCVm)\n# plot(d_BQC_stats$logCV, d_BQC_stats$rCVm, xlim = c(0,200))\n# plot(d_BQC_stats$CV, d_BQC_stats$rCVq)"
  },
  {
    "objectID": "plotting_basics.html",
    "href": "plotting_basics.html",
    "title": "5  Plotting Basics",
    "section": "",
    "text": "We explore plotting using dilution series data as an example"
  },
  {
    "objectID": "plotting_basics.html#libraries",
    "href": "plotting_basics.html#libraries",
    "title": "5  Plotting Basics",
    "section": "5.1 Libraries",
    "text": "5.1 Libraries\nThe package ggpmisc will only be used once in this chapter. It provides additional functions for the annotating and plotting of fitted models\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(ggpmisc)"
  },
  {
    "objectID": "plotting_basics.html#import-datasets",
    "href": "plotting_basics.html#import-datasets",
    "title": "5  Plotting Basics",
    "section": "5.2 Import Datasets",
    "text": "5.2 Import Datasets\nWe import a lipidomics dataset in a flat table with additinal columns indicating QC types, injection volumes, and dilution series number\n\nd_orig <- read_csv(here(\"data/Testdata_Lipidomics_flat_wide_annotated_V1.csv\"))\n\n\n\n?(caption)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDataFileName\nQCtype\nCurveNo\nInjVol\nCE 16:0\nCE 16:1\nCE 16:2\nCE 17:0\nCE 17:1\nCE 18:0\nCE 18:1\nCE 18:1 d7 (ISTD)\nCE 18:2\nCE 18:3\nCE 20:1\nCE 20:2\nCE 20:3\nCE 20:4\nCE 20:5\nCE 22:0\nCE 22:1\nCE 22:4\nCE 22:5\nCE 22:6\nCE 24:4\nCer d18:0/16:0\nCer d18:0/18:0\nCer d18:0/20:0\nCer d18:0/22:0\nCer d18:0/22:0 [284]\nCer d18:0/24:1\nCer d18:0/24:1 [284]\nCer d18:1/16:0\nCer d18:1/16:0 d31 (ISTD)\nCer d18:1/17:0\nCer d18:1/18:0\nCer d18:1/20:0\nCer d18:1/22:0\nCer d18:1/24:0\nCer d18:1/24:1\nCer d18:1/25:0\nCer d18:1/26:0\nCer d18:2/22:0\nCer d18:2/24:1\nCOH [161)\nCOH [95)\nDG 14:0_18:1 [-14:0]\nDG 14:0_18:1 [-18:1]\nDG 14:0_18:2 [-14:0]\nDG 14:0_18:2 [-18:2]\nDG 15:0_18:1 d7 (ISTD) [-15:0]\nDG 15:0_18:1 d7 (ISTD) [-18:1]\nDG 16:0_16:0 [-16:0]\nDG 16:0_16:1 [-16:0]\nDG 16:0_16:1 [-16:1]\nDG 16:0_18:1 [-16:0]\nDG 16:0_18:1 [-18:1]\nDG 16:0_18:2 [-16:0]\nDG 16:0_18:2 [-18:2]\nDG 16:0_20:3 [-20:3]\nDG 16:0_20:4 [-20:4]\nDG 16:0_22:5 [-22:5]\nDG 16:0_22:6 [-22:6]\nDG 16:1_18:1 [-16:1]\nDG 16:1_18:1 [-18:1]\nDG 18:0_18:1 [-18:0]\nDG 18:0_18:1 [-18:1]\nDG 18:0_18:2 [-18:0]\nDG 18:0_18:2 [-18:2]\nDG 18:0_20:4 [-20:4]\nDG 18:1_18:1 [-18:1]\nDG 18:1_18:2 [-18:1]\nDG 18:1_18:2 [-18:2]\nDG 18:1_18:3 [-18:3]\nDG 18:1_20:3 [-20:3]\nDG 18:1_20:4 [-18:1]\nDG 18:1_20:4 [-20:4]\nDG 18:2_18:2 [-18:2]\nDG 18:2_20:3 [-20:3]\nDG 18:2_20:4 [-20:4]\nDiisooctyl Phthalate\nGM3 d18:1/16:0\nGM3 d18:1/18:0\nGM3 d18:1/20:0\nGM3 d18:1/22:0\nGM3 d18:1/24:0\nGM3 d18:1/24:1\nHex2Cer d18:1/16:0\nHex2Cer d18:1/16:0 d3 (ISTD)\nHex2Cer d18:1/18:0\nHex2Cer d18:1/20:0\nHex2Cer d18:1/22:0\nHex2Cer d18:1/24:0\nHex2Cer d18:1/24:1\nHex3Cer d18:1/16:0\nHex3Cer d18:1/18:0\nHex3Cer d18:1/20:0\nHex3Cer d18:1/22:0\nHex3Cer d18:1/24:0\nHex3Cer d18:1/24:1\nHexCer d18:1/16:0\nHexCer d18:1/16:0 d3 (ISTD)\nHexCer d18:1/18:0\nHexCer d18:1/20:0\nHexCer d18:1/22:0\nHexCer d18:1/24:0\nHexCer d18:1/24:1\nLPC 14:0\nLPC 15:0\nLPC 16:1\nLPC 17:0\nLPC 17:1\nLPC 18:0\nLPC 18:1\nLPC 18:1 d7 (ISTD)\nLPC 18:2\nLPC 18:3\nLPC 19:0\nLPC 19:1\nLPC 20:0\nLPC 20:1\nLPC 20:2\nLPC 20:3\nLPC 20:4\nLPC 20:5\nLPC 22:0\nLPC 22:1\nLPC 22:5\nLPC 22:6\nLPC 24:0\nLPC 26:0\nLPC O-16:0\nLPC O-18:0\nLPC O-18:1\nLPC O-20:0\nLPC O-20:1\nLPC O-22:0\nLPC O-22:1\nLPC O-24:0\nLPC P-16:0\nLPC P-18:0\nLPC P-18:1\nLPC P-20:0\nLPE 16:0\nLPE 18:0\nLPE 18:1\nLPE 18:1 d7 (ISTD)\nLPE 18:2\nLPE 20:4\nLPE 22:6\nLPE P-16:0\nLPE P-18:0\nLPE P-18:1\nLPI 20:4\nLPS 16:0\nLPS 18:0\nLPS 18:1\nLPS 18:2\nPC 31:0\nPC 31:1\nPC 32:0\nPC 32:1\nPC 32:2\nPC 32:3\nPC 33:1\nPC 33:1 d7 (ISTD)\nPC 33:2\nPC 34:0\nPC 34:1\nPC 34:2\nPC 34:2 + 2O\nPC 34:2 + OO-34:3 +2OP-34:2 +2O\nPC 34:3\nPC 34:4\nPC 34:5\nPC 35:1\nPC 35:2\nPC 35:3\nPC 35:4\nPC 35:5\nPC 36:1\nPC 36:2\nPC 36:3\nPC 36:4 a\nPC 36:4 b\nPC 36:5\nPC 36:6\nPC 36:7\nPC 37:4\nPC 37:5\nPC 37:6\nPC 38:3\nPC 38:4\nPC 38:5|PC 38:6 [M+2]\nPC 38:6\nPC 38:7\nPC 38:8\nPC 39:5\nPC 39:6\nPC 39:7\nPC 40:4|PC 40:5 [M+2]|PC 40:6 [M+4]\nPC 40:5|PC 40:6 [M+2]\nPC 40:6\nPC 40:7\nPC 40:8\nPC O-32:0\nPC O-32:1\nPC O-32:2\nPC O-34:1\nPC O-34:2\nPC O-34:4\nPC O-36:1\nPC O-36:2\nPC O-36:4\nPC O-36:5\nPC O-38:4\nPC O-38:5\nPC O-38:6\nPC O-40:5\nPC O-40:6\nPC O-40:7\nPC P-32:0\nPC P-32:1\nPC P-34:1\nPC P-34:2\nPC P-34:3\nPC P-36:2\nPC P-36:4\nPC P-36:5\nPC P-38:4\nPC P-38:5\nPC P-40:5\nPC P-40:6\nPE 32:1\nPE 33:1 d7 (ISTD)\nPE 34:0\nPE 34:1\nPE 34:2\nPE 34:3\nPE 35:1\nPE 35:2\nPE 36:1\nPE 36:2\nPE 36:3|PE 36:4 [M+2]\nPE 36:4 a\nPE 36:4 b\nPE 36:5\nPE 37:5\nPE 38:3\nPE 38:4\nPE 38:5\nPE 38:6\nPE 40:4\nPE 40:5|PE 40:6 [M+2]\nPE 40:6\nPE 40:7\nPE O-34:1\nPE O-34:2\nPE O-36:2\nPE O-36:3\nPE O-36:5\nPE O-38:4\nPE O-38:5\nPE O-40:5\nPE O-40:6\nPE O-40:7\nPE P-16:0/18:1 [FA]\nPE P-16:0/18:1 [head group]\nPE P-16:0/18:2 [FA]\nPE P-16:0/18:2 [head group]\nPE P-16:0/20:4 [FA]\nPE P-16:0/20:4 [head group]\nPE P-16:0/22:5 [FA]\nPE P-16:0/22:5 [head group]\nPE P-16:0/22:6 [FA]\nPE P-16:0/22:6 [head group]\nPE P-18:0/18:1 [FA]\nPE P-18:0/18:1 [head group]\nPE P-18:0/18:2 [FA]\nPE P-18:0/18:2 [head group]\nPE P-18:0/20:4 [FA]\nPE P-18:0/20:4 [head group]\nPE P-18:0/22:5 [FA]\nPE P-18:0/22:5 [head group]\nPE P-18:0/22:6 [FA]\nPE P-18:0/22:6 [head group]\nPE P-20:0/20:4 [FA]\nPE P-20:0/20:4 [head group]\nPE P-34:1 [-141]\nPE P-34:2 [-141]\nPE P-36:2 [-141]\nPE P-36:3 [-141]\nPE P-36:4 [-141]\nPE P-38:4 [-141]\nPE P-38:5 [-141]\nPE P-38:6 [-141]\nPE P-40:5 [-141]\nPE P-40:6 [-141]\nPG 33:1 d7 (ISTD)\nPG 34:1\nPG 36:1\nPG 36:2\nPI 32:0\nPI 32:1\nPI 33:1 d7 (ISTD)\nPI 34:0\nPI 34:1\nPI 34:2\nPI 35:1\nPI 35:2\nPI 36:1\nPI 36:2\nPI 36:3|PI 36:4 [M+2]\nPI 36:4\nPI 36:5\nPI 37:4\nPI 38:3\nPI 38:4\nPI 38:5\nPI 38:6\nPI 40:4\nPI 40:5|PI 40:6 M+2\nPI 40:6\npolysiloxane 7\npolysiloxane 8\nPS 33:1 d7 (ISTD)\nSM 30:1\nSM 31:1\nSM 32:0\nSM 32:1\nSM 32:2\nSM 33:1\nSM 34:0\nSM 34:1\nSM 34:2\nSM 34:3\nSM 35:1\nSM 35:2\nSM 36:1\nSM 36:2\nSM 36:2 d9 (ISTD)\nSM 36:3\nSM 38:1\nSM 38:2\nSM 38:3\nSM 39:1\nSM 40:1\nSM 40:2\nSM 40:3|PC 36:4 M+1\nSM 41:1\nSM 42:1\nSM 42:2\nSM 42:3\nSM 43:1\nSM 44:1\nSM 44:2\nTG 48:0\nTG 48:0 [-16:0]\nTG 48:1\nTG 48:1 [-18:1]\nTG 48:1 d7 (ISTD)\nTG 48:1 d7 [-15:0] (ISTD)\nTG 48:2\nTG 48:2 [-14:1]\nTG 48:2 [-16:0]\nTG 48:2 [-16:1]\nTG 48:2 [-18:1]\nTG 48:3\nTG 48:3 [-16:1]\nTG 48:3 [-18:2]\nTG 49:1\nTG 49:1 [-15:0]\nTG 49:1 [-16:0]\nTG 49:1 [-18:1]\nTG 50:0\nTG 50:0 [-18:0]\nTG 50:1\nTG 50:1 [-14:0]\nTG 50:1 [-18:1]\nTG 50:2\nTG 50:2 [-18:0]\nTG 50:2 [-18:1]\nTG 50:2 [-18:2]\nTG 50:3\nTG 50:3 [-14:1]\nTG 50:3 [-16:1]\nTG 50:3 [-18:1]\nTG 50:4\nTG 50:4 [-14:0]\nTG 51:0 [-16:0]\nTG 51:0 [-17:0]\nTG 51:1\nTG 51:1 [-18:1]\nTG 51:2\nTG 51:2 [-15:0]\nTG 51:2 [-16:0]\nTG 51:2 [-18:1]\nTG 52:1\nTG 52:1 [-18:0]\nTG 52:2\nTG 52:2 [-16:0]\nTG 52:3\nTG 52:3 [-16:1]\nTG 52:3 [-18:2]\nTG 52:4\nTG 52:4 [-16:0]\nTG 52:4 [-18:1]\nTG 53:2\nTG 53:2 [-17:0]\nTG 54:1\nTG 54:1 [-18:1]\nTG 54:2\nTG 54:2 [-18:0]\nTG 54:3\nTG 54:3 [-18:1]\nTG 54:4\nTG 54:4 [-18:0]\nTG 54:4 [-18:2]\nTG 54:5\nTG 54:5 [-18:1]\nTG 54:6\nTG 54:6 [-18:2]\nTG 56:6\nTG 56:6 [-20:4]\nTG 56:8\nTG 56:8 [-20:4]\nTG 58:8\nTG 58:8 [-22:6]\n\n\n\n\n007_ExtrBLK+ISTD01.d\nPBLK\nNA\n1.0\n286\n176\n3\n138\n62\n59\n3428\n689555\n10116\n376\n274\n69\n149\n4192\n1447\n68\n13\n8\n541\n677\n95\n299\n151\n370\n879\n84\n747\n60\n296\n52921\n76\n504\n445\n561\n2002\n601\n115\n577\n81\n50\n930\n758\n68\n227\n27\n72\n46210\n35538\n12075\n27\n443\n986\n755\n114\n788\nNA\n17\n33\n74\n680\n1121\n366\n347\n186\n446\n90\n2580\n1276\n1677\n102\n77\n0\n79\n575\n86\n6\n10884476\n296\n40\nNA\n11\n3\n15\n130\n19588\n169\n11\n77\n43\n5\n101\n11\n14\n18\n4\n18\n4\n81\n483\nNA\n11\n35\n173\n343\n1899\n1641\n1394\n194\n45993\n14271\n743063\n8866\n261\n315\n342\n52\n306\n313\n773\n4746\n404\n84\n46\n776\n374\n21\n3978\n554\n243\n567\n2\n24\nNA\n7\n10\n118\n146\n19\n5\n197\n203\n473\n30320\n273\n105\n116\n5\n52\n5\n9\n3\n36\n9\n14\n2337\n127\n5482\n4179\n1014\n56\n2544\n5364027\n2055\n3028\n50186\n220121\n8836\n3371\n12841\n3739\n439\n7315\n6255\n3550\n4741\n555\n44677\n193527\n66604\n8948\n74075\n15242\n1398\n139\n7389\n4445\n715\n29878\n218128\n116602\n31502\n1950\n1604\n1697\n1368\n664\n10408\n28746\n32564\n3049\n1174\n727\n154\n223\n3945\n1504\n63496\n120\n1971\n10601\n2625\n3839\n10068\n1570\n599\n33\n749\n667\n124\n2145\n1528\n63496\n947\n3496\n2430\n2586\n2146\n84\n103\n119\n85385\n37\n732\n1521\n1501\n75\n4\n593\n3321\n769\n141\n948\n82\n3\n24\n1387\n643\n354\n56\n150\n125\n3\n12\n2\n112\n63\n5\n377\n15\n85\nNA\nNA\n84\n46\n12\n24\n250\n185\n47\n10\n41\n5\n40\n27\n38\n11\n189\n62\n167\n7\n152\n53\n8\n6\nNA\n3\n6\n6\nNA\n15\n28\n9\n6\n65\n274588\n134\n11\n1276\n300\n39\n43018\n74\n186\n564\nNA\n5\n87\n890\n33\n169\n39\n121\n344\n3313\n428\n74\n171\n174\n4\n70768\n180139\n25363\n58\n77\n64\n1406\n170\n1618\n3123\n55411\n4064\n17\n1835\n55\n10333\n4775\n582952\n105\n4115\n6898\n391\n2878\n13648\n3948\n64752\n6403\n5377\n14692\n615\n803\n324\n315\n69292\n157096\n87824\n14097\n1223048\n1155057\n79678\n2246\n9701\n38124\n7483\n19294\n10544\n1721\n310114\n12002\n14803\n10859\n82977\n59094\n73204\n1860\n32582\n82248\n1562\n18063\n6893\n27208\n729\n12103\n5169\n8014\n96\n6051\n5371\n59691\n7676\n32008\n1599\n3712\n8119\n62496\n13275\n93624\n26525\n57316\n5563\n11115\n39649\n3334\n2364\n12603\n1530\n31678\n2391\n44729\n7425\n66343\n33337\n545312\n704\n1584\n61815\n3630\n20502\n1958\n12937\n572\n7188\n267\n11468\n51\n\n\n009_NIST_NIST01.d\nNIST\nNA\n1.0\n127473\n63573\n1354\n4352\n10483\n25764\n2783175\n738212\n13162658\n268666\n2432\n22891\n750424\n4331803\n440531\n159\n289\n33936\n119603\n469990\n2819\n2032\n2507\n3130\n13689\n4089\n163978\n3598\n20578\n58137\n407\n9578\n9657\n109670\n474960\n128787\n5898\n5495\n13298\n15250\n62026\n75898\n4694\n6308\n2939\n4740\n23752\n25514\n25321\n9300\n7985\n65222\n86007\n36817\n72652\n3515\n11053\n3842\n2715\n19179\n15307\n9694\n10912\n9669\n9996\n3978\n166263\n102995\n127856\n14601\n6590\n2967\n26302\n53036\n3774\n9941\n12028398\n22791\n6010\n3205\n4061\n4856\n4056\n106803\n19758\n1327\n219\n5130\n6301\n18680\n22473\n8010\n506\n3691\n5062\n6070\n201817\n65013\n6262\n3772\n39476\n64282\n41399\n137314\n81574\n346927\n130496\n24036\n3794250\n2898079\n1028806\n3046211\n50027\n9119\n5646\n9732\n19749\n27292\n231721\n750717\n37843\n2648\n1431\n56154\n101253\n3547\n12303\n108525\n25048\n86960\n4571\n4829\n4705\n5904\n10741\n35194\n3148\n4106\n3780\n19083\n25955\n20755\n32941\n32608\n14350\n6862\n2360\n2322\n961\n970\n3520\n732\n375\n353\n107170\n12343\n2144857\n4292903\n281378\n5590\n524947\n6948171\n577516\n291150\n26218795\n72538161\n499424\n481548\n2793917\n154926\n8551\n622151\n1094257\n326459\n142848\n3259\n2673755\n28758469\n16938446\n3594098\n19641161\n1585119\n33128\n675\n588800\n175758\n27043\n4266329\n11203851\n8258775\n13240020\n84571\n3575\n245280\n82061\n13853\n426518\n1049393\n1769673\n619813\n75505\n300743\n93996\n13065\n577991\n834438\n243929\n40578\n176994\n2335966\n93378\n812063\n1756614\n62520\n159494\n120383\n146460\n253160\n53650\n411874\n1222791\n243929\n216928\n1354951\n85965\n379378\n697564\n126608\n39892\n18069\n72411\n1591\n70238\n114781\n11020\n2543\n3712\n51482\n289573\n96921\n33207\n165189\n8842\n1431\n36141\n307092\n113882\n430302\n9090\n32529\n77145\n22208\n5985\n8418\n8972\n9036\n1882\n37007\n49305\n7587\n5891\n7340\n7787\n12375\n25305\n23644\n92100\n95195\n30551\n17864\n52029\n30229\n10421\n9987\n45057\n58485\n171670\n168714\n13585\n14555\n35227\n38250\n8036\n9595\n2377\n6919\n15024\n42958\n12554\n37074\n47238\n16703\n12986\n10628\n309207\n2827\n1351\n8581\n4483\n14210\n52508\n8924\n77584\n83305\n1663\n4135\n89470\n234090\n62510\n58141\n1040\n4738\n248874\n564977\n52061\n8225\n28222\n28282\n16498\n90063\n139562\n79878\n29418\n15895\n40053\n987604\n80064\n576029\n3841275\n36009635\n2099380\n13225\n661530\n76583\n4254255\n5493318\n2042574\n153261\n2204192\n1053841\n133281\n704683\n4426105\n3414587\n21053767\n1445846\n2265186\n7185614\n3458279\n104401\n9260\n37478\n1713850\n2579195\n4259047\n1609938\n1088468\n1077786\n2996868\n201403\n1147437\n929866\n833735\n940461\n182196\n309810\n606252\n141427\n240862\n183495\n1980468\n1297072\n12311881\n130839\n7056648\n16533433\n93602\n4895184\n2716242\n8832187\n81948\n2630841\n1440570\n2009639\n234563\n55377\n38042\n793988\n321167\n1370133\n137899\n315528\n560791\n10189061\n3297740\n38252501\n11964607\n37500101\n1261912\n10354682\n24520756\n4653990\n2635978\n904734\n212152\n1392636\n315694\n7311102\n2153844\n12461871\n8145577\n12948806\n367959\n924028\n11723013\n1918808\n5831344\n843191\n3314241\n356905\n1117741\n121504\n610872\n62389\n\n\n010_TQC-0perc.d\nRQC\n1\n0.0\n176\n208\n43\n69\n32\n21\n775\n88\n4449\n394\n13\nNA\n324\n2995\n540\n70\n47\n9\n328\n485\nNA\n262\n96\n345\n785\n20\n920\n43\n499\n163\nNA\n59\n245\n576\n1951\n107\n97\n650\nNA\n59\n65\n1216\n83\n48\n73\n76\n67\n81\n13056\n74\n182\n1053\n1488\n297\n531\nNA\n33\nNA\n71\n145\n115\n163\n416\n120\n336\n183\n2292\n807\n1589\n381\nNA\n0\n96\n406\nNA\n0\n9621854\n121\n0\n75\n0\n7\n6\n53\n0\n5\n46\n0\n19\n17\n153\n86\n7\n0\n7\n0\n0\n126\nNA\nNA\n21\n5\n21\n288\n255\n1081\n812\n154\n27944\n9967\n1206\n7387\n193\n125\n212\n82\n184\n110\n426\n2931\n249\n92\n12\n359\n247\n56\n39\n522\n156\n281\n5\n8\n21\n18\n60\n153\n18\n66\n40\n254\n153\n525\n50\n136\n38\n125\n13\n11\nNA\n11\n7\n11\nNA\n5\n508\n154\n3808\n3178\n1497\n36\n2043\n7977\n544\n997\n42277\n130082\n3146\n3582\n8252\n2438\n420\n3193\n2540\n1136\n1505\n228\n43477\n145681\n36696\n11968\n44258\n7001\n672\n110\n3820\n2047\n445\n15850\n100563\n48640\n15930\n1041\n333\n1068\n556\nNA\n3655\n9078\n14142\n1077\n777\n412\n105\n71\n1880\n536\n35\n116\n1185\n6927\n1132\n3068\n4810\n293\n186\n514\n32\n76\n71\n556\n1597\n35\n1086\n1844\nNA\n1563\n1008\n390\n267\n0\n87\n16\n1248\n1787\n929\n234\n66\n195\n2276\n708\n341\n97\n284\n6\n22\n1422\n117\n62\n50\n139\n150\n4\n23\n3\n68\n4\n10\n82\n42\n204\n2\n52\nNA\n9\n5\n65\n279\n44\n0\n69\nNA\n20\n64\n143\n97\n5\n255\n52\n110\n45\n82\n5\n22\n46\n4\n4\n7\n13\nNA\n134\n1\n0\nNA\nNA\n133\n166\n0\n1363\n0\n20\n100\n0\n345\n559\nNA\n68\n2\n268\n306\n433\n55\n0\n67\n2487\n207\n45\n74\n317\n121\n133566\n435796\nNA\n59\n63\nNA\n1103\n53\n1888\n1196\n45361\n3665\n30\n1734\n500\n7304\n2388\n606\n253\n4118\n1414\n613\n722\n14459\n6812\n46493\n3662\n6282\n15077\n198\n305\n203\n299\n84832\n130952\n77481\n13927\n55692\n485\n72017\n2107\n9871\n31049\n7373\n15593\n8308\n1625\n67786\n13271\n17665\n8660\n71660\n31531\n73428\n963\n29587\n84100\n2063\n20463\n6554\n32747\n536\n10082\n4977\nNA\n30\n4944\n2760\n32404\n7362\n24266\n2011\n4011\n9419\n46059\n10004\n83604\n18932\n42201\n5155\n15668\n17497\n3106\n2170\n11341\n1221\n25696\n2122\n28169\n4117\n45821\n24443\n22263\n491\n1666\n14707\n2711\n21203\n1189\n9077\n210\n8244\n148\n7214\n117\n\n\n011_TQC-20perc.d\nRQC\n1\n0.2\n61694\n20572\n1334\n1793\n6066\n12630\n1254932\n122316\n10162065\n298819\n1096\n13190\n355471\n9214056\n923462\n83\n41\n27013\n158402\n490973\n186\n1353\n1015\n992\n1856\n518\n21905\n563\n12154\n12449\n432\n12612\n7216\n29933\n61119\n43403\n1813\n1238\n2063\n2478\n67872\n73909\n824\n1516\n908\n5\n4762\n4914\n15414\n1528\n1187\n9772\n12150\n10529\n15260\n825\n5732\n1862\n1452\n4205\n4831\n3845\n4948\n3980\n6617\n4510\n44752\n26787\n34749\n6103\n2610\n1208\n9334\n11170\n865\n8181\n10404085\n20565\n7126\n1653\n1816\n902\n4125\n23108\n2958\n2393\n468\n1010\n1340\n1201\n3702\n2402\n619\n387\n519\n728\n42680\n19104\n1274\n827\n1704\n2699\n1737\n39034\n26830\n187399\n105172\n15929\n4638519\n1126016\n159574\n930585\n28405\n17858\n5507\n5969\n17237\n17624\n73068\n495662\n41901\n1820\n1342\n68524\n48665\n1857\n1550\n37452\n17252\n40956\n613\n705\n158\n221\n155\n6778\n1371\n1083\n966\n10633\n28832\n9210\n6740\n7561\n3868\n1424\n708\n1940\n641\n274\n714\n1036\n199\n43\n50683\n5206\n508068\n693799\n147071\n7335\n205200\n1325752\n199052\n203669\n6609328\n29442224\n756090\n469800\n1353212\n77345\n5025\n487661\n658999\n251582\n97587\n3950\n3694307\n25860400\n7523694\n1451904\n12283106\n1354230\n43142\n1691\n839878\n296705\n21466\n3117178\n24244982\n12609444\n5991185\n153116\n18565\n127489\n109214\n11159\n816180\n2457044\n3210928\n527581\n108967\n78736\n55214\n13136\n236840\n183855\n58394\n22161\n86525\n1017511\n133620\n397755\n1186140\n154760\n111815\n118739\n66732\n37681\n5551\n111762\n226915\n58394\n62617\n320892\n59986\n174464\n191838\n51790\n9855\n4059\n13910\n1200\n20037\n40466\n5735\n1542\n5198\n20770\n147044\n52985\n21955\n60167\n6198\n1723\n9818\n210873\n70869\n182277\n6369\n29116\n32769\n12379\n1692\n2323\n9762\n2278\n674\n40687\n32843\n34161\n7262\n8337\n792\n898\n1162\n2324\n6873\n9560\n6843\n3517\n9900\n6187\n2519\n2215\n6004\n5316\n26777\n38186\n7873\n7506\n5864\n7466\n521\n427\n116\n366\n1564\n5837\n1919\n6078\n15802\n1573\n13824\n2680\n50535\n2737\n489\n9130\n1712\n1571\n9490\n15992\n16417\n23906\n2078\n2374\n34472\n66359\n24239\n36026\n1114\n3296\n72903\n298856\n32144\n3350\n18084\n13935\n4693\n202140\n567223\n16956\n2934\n4176\n3487\n116392\n9371\n230925\n840399\n7792418\n459229\n2809\n366413\n31604\n1211164\n1477662\n275813\n20060\n303689\n162667\n30349\n151902\n493389\n287821\n12822011\n347213\n333465\n1189392\n59863\n24272\n4147\n13270\n691319\n1067563\n1138106\n451759\n347005\n265272\n587806\n37355\n152370\n174334\n180093\n214514\n48780\n46771\n407948\n75885\n124483\n126712\n1034646\n586888\n3872574\n81522\n1910499\n3964718\n67644\n1451011\n739644\n1727153\n25737\n483618\n360356\n483880\n36490\n39829\n29394\n550179\n158819\n702224\n69656\n135707\n288183\n3711590\n1614807\n14927621\n4037398\n17539953\n827120\n3341124\n5594760\n928052\n896321\n604613\n167787\n722626\n161911\n3006890\n1187016\n7798572\n4307841\n11490319\n360533\n572420\n5415961\n966709\n2483365\n315246\n2821175\n374205\n824005\n100156\n581948\n43145\n\n\n012_TQC-40perc.d\nRQC\n1\n0.4\n117673\n48622\n1584\n4550\n12252\n39588\n2607941\n315312\n20199519\n358757\n3010\n28641\n615644\n12485971\n2182075\n22\n18\n48920\n339380\n742016\n1088\n2857\n3067\n1466\n3157\n905\n51812\n981\n15892\n14277\n1099\n29760\n15453\n67207\n142054\n107122\n3960\n2146\n3720\n7831\n69443\n75636\n2137\n2048\n1057\n1045\n10021\n12896\n19260\n2397\n3472\n26870\n37350\n23633\n29960\n2126\n11101\n4436\n1793\n10244\n10281\n9138\n9298\n10737\n14924\n12429\n89279\n83036\n74684\n15247\n5168\n3441\n19901\n32067\n5170\n16341\n10581631\n58123\n17612\n3504\n1217\n2103\n2156\n58051\n9087\n6000\n1219\n3486\n3053\n3810\n6222\n3030\n730\n1408\n1772\n841\n86015\n52621\n2457\n3211\n5596\n6574\n4951\n89832\n67649\n429799\n251299\n38777\n14838903\n2954297\n439570\n2326507\n64211\n46124\n13270\n14168\n52770\n41843\n186901\n1327072\n104006\n4475\n4069\n174737\n124183\n5326\n6499\n83963\n41191\n88453\n2048\n1683\n578\n581\n426\n15963\n3803\n2469\n1657\n25231\n68525\n20087\n13823\n17964\n8760\n3073\n1649\n4835\n1102\n540\n2127\n2642\n389\n71\n94942\n13501\n1291580\n2022692\n383311\n14765\n487825\n3132381\n557533\n580772\n13509625\n53795455\n1980420\n1304889\n4409903\n206510\n13448\n1328407\n1945259\n543379\n282428\n10074\n9844450\n48720121\n13790204\n5014062\n30950762\n4635226\n97396\n3902\n2386817\n951059\n55754\n7625670\n40784021\n24718897\n15246895\n335989\n37261\n390578\n249937\n31709\n1808005\n4415291\n6599016\n1345593\n356688\n222909\n152480\n26521\n731712\n365189\n164873\n59171\n236241\n2368822\n292476\n1316157\n2322290\n216129\n363011\n187248\n144267\n71669\n16449\n302754\n498029\n164873\n184480\n848949\n134693\n369634\n525392\n179693\n17709\n5336\n39522\n2514\n36898\n82520\n12722\n5439\n7179\n55161\n273642\n114984\n61084\n135118\n15179\n8077\n29162\n416860\n153189\n397746\n19739\n50842\n60793\n28857\n10002\n3458\n23793\n4289\n1608\n88303\n68892\n74045\n10752\n13565\n2300\n2581\n2015\n3555\n16283\n23990\n20928\n11038\n18572\n11400\n5157\n5434\n12282\n13699\n63213\n83452\n20527\n21725\n15600\n23616\n981\n687\n505\n1121\n3908\n11139\n4188\n14255\n36887\n3646\n30128\n2901\n103162\n4790\n1461\n16959\n3435\n4539\n21631\n22318\n42756\n56618\n4037\n4010\n88201\n201309\n43831\n79562\n2538\n9759\n219411\n651807\n79351\n8537\n52609\n39001\n13983\n249091\n466880\n32406\n7144\n10316\n8864\n281206\n24138\n621646\n1942572\n27612222\n984462\n5721\n963459\n79113\n2731227\n3271466\n872857\n49650\n951864\n343967\n63586\n480738\n1356196\n880350\n26167824\n944484\n760560\n2595089\n156848\n67324\n12250\n34241\n1106826\n1499276\n1958793\n878979\n721557\n630266\n1369952\n92952\n325846\n409738\n369498\n471095\n105790\n119907\n505906\n116102\n195811\n186531\n2064964\n1278469\n6308232\n122047\n3152024\n7508103\n131067\n2883614\n1073917\n4378084\n69767\n1247724\n800924\n1123044\n80643\n76914\n65275\n849991\n309751\n1166669\n86571\n210298\n436332\n8728511\n3398622\n18913822\n6316448\n26768309\n1509715\n5763033\n15066447\n2493426\n2551634\n1232388\n337260\n1861349\n483059\n9173035\n2772530\n11508134\n7918162\n17142880\n574890\n922970\n14148146\n2612867\n5794736\n771570\n5317616\n548092\n2069017\n264968\n1363608\n126308\n\n\n013_TQC-60perc.d\nRQC\n1\n0.6\n156974\n46748\n2024\n8108\n16930\n68171\n3470512\n430598\n21175237\n358670\n5194\n36523\n941156\n15466319\n3178876\n20\n166\n64374\n295298\n1019271\n1093\n2455\n5664\n1760\n4773\n1366\n77299\n1577\n22712\n29252\n1029\n30987\n24735\n94740\n221862\n170846\n5837\n3192\n5717\n12955\n68640\n76589\n3317\n5656\n1124\n1821\n13733\n19908\n25348\n3376\n4540\n36722\n52281\n30847\n49311\n2678\n17022\n8098\n3713\n14773\n14711\n13376\n14782\n14595\n20999\n18957\n158583\n113541\n113038\n16069\n8255\n4624\n34243\n39471\n6560\n17744\n10800520\n81852\n26201\n4035\n2407\n1712\n5366\n99707\n15004\n5621\n2314\n4274\n3171\n5472\n10077\n3194\n905\n1590\n1699\n2311\n112728\n92340\n4039\n4879\n8147\n9650\n8163\n139576\n112760\n659549\n379460\n61269\n27286319\n5041635\n729528\n3873034\n95940\n71581\n22550\n23901\n94750\n68859\n315268\n2167424\n161473\n7005\n5334\n294022\n199385\n7451\n9408\n154936\n63400\n162642\n2787\n3170\n916\n805\n963\n21785\n5807\n3963\n2511\n37996\n99375\n29740\n21580\n28558\n13401\n4862\n2401\n6981\n2063\n943\n4056\n4060\n927\n535\n118345\n26905\n1770885\n3171171\n582064\n22358\n554965\n4069666\n869196\n922882\n18847354\n61237414\n3395370\n1782637\n7180931\n342895\n22164\n2027915\n2370170\n970208\n372987\n12580\n17980909\n58785218\n21383288\n7037327\n36135439\n7153772\n151948\n5232\n3295363\n1295516\n113871\n11388561\n45945289\n30144206\n22873131\n555058\n63994\n606785\n320774\n50194\n2802510\n5778767\n10096374\n1789018\n495586\n353759\n190798\n39208\n1199459\n383518\n240126\n97139\n410953\n3429512\n363644\n1975318\n3041881\n213588\n568661\n186321\n221778\n138100\n30523\n437824\n606467\n240126\n296127\n1383135\n151409\n563884\n715009\n243522\n32973\n9492\n69562\n4743\n48045\n118034\n17683\n6246\n15036\n96662\n353890\n173216\n67780\n179887\n20553\n9808\n47188\n420527\n234726\n442814\n26002\n68646\n84319\n28701\n13232\n3948\n33482\n4666\n1389\n145695\n82052\n128864\n14449\n19943\n4912\n3259\n5766\n7267\n27032\n29049\n30729\n16266\n23765\n13039\n8406\n8311\n19429\n17165\n122088\n99755\n28542\n27565\n24146\n22617\n1310\n1456\n1638\n1144\n7663\n27329\n3005\n24735\n58184\n4093\n54603\n4377\n205893\n7216\n2831\n20434\n6478\n7855\n34181\n24434\n59813\n105520\n5927\n7393\n69090\n247296\n73219\n139031\n4424\n14417\n236097\n1242914\n109192\n13836\n42954\n49338\n21254\n65323\n154719\n35757\n10606\n14660\n12594\n445081\n34161\n937595\n2552058\n42448905\n1466065\n11104\n1092522\n117699\n3872093\n4521678\n1210793\n88135\n1402276\n418103\n83241\n821261\n1935472\n1388413\n32999765\n1551228\n1163204\n4298622\n842475\n101599\n16069\n46857\n1162439\n1822452\n2843614\n1077254\n642714\n862320\n2002130\n140325\n577704\n540820\n599313\n775705\n162782\n176731\n559338\n130203\n199692\n213629\n2492710\n1454644\n7378543\n159023\n4355694\n8366068\n148504\n3550924\n1304357\n6436755\n95553\n1391568\n1157419\n1738345\n147102\n104962\n104262\n1076069\n380672\n1277747\n140647\n268994\n555391\n12427530\n3799514\n29606799\n7141771\n31676652\n1659674\n7283898\n20518296\n3218666\n2917170\n1388816\n366257\n3204483\n708824\n9984047\n4211767\n16790868\n8627074\n22094513\n591913\n1106370\n16952617\n3448999\n9164283\n1337916\n6502633\n830651\n3026281\n364772\n1687461\n133587"
  },
  {
    "objectID": "plotting_basics.html#prepare-data",
    "href": "plotting_basics.html#prepare-data",
    "title": "5  Plotting Basics",
    "section": "5.3 Prepare Data",
    "text": "5.3 Prepare Data\n\n# Convert to long format\nd_long <- d_orig|> \n  pivot_longer(cols = -DataFileName:-InjVol, \n               names_to = \"Lipid\" , \n               values_to = \"Area\")\n\n# Get a table with RQCs only and sort by Lipid\nd_rqc <- d_long |> \n  filter(QCtype == \"RQC\") |> \n  arrange(Lipid)\n\n#Have a look at the table using View(d_rqc)"
  },
  {
    "objectID": "plotting_basics.html#plot-a-single-curve",
    "href": "plotting_basics.html#plot-a-single-curve",
    "title": "5  Plotting Basics",
    "section": "5.4 Plot a single curve",
    "text": "5.4 Plot a single curve\n\n#Select data from one single lipid from dilution curve\nd_forplot <- d_rqc  |> filter(Lipid == \"LPC 16:1\", CurveNo == 1)\n\n\n\n\n\n\nDataFileName\nQCtype\nCurveNo\nInjVol\nLipid\nArea\n\n\n\n\n010_TQC-0perc.d\nRQC\n1\n0.0\nLPC 16:1\n1081\n\n\n011_TQC-20perc.d\nRQC\n1\n0.2\nLPC 16:1\n187399\n\n\n012_TQC-40perc.d\nRQC\n1\n0.4\nLPC 16:1\n429799\n\n\n013_TQC-60perc.d\nRQC\n1\n0.6\nLPC 16:1\n659549\n\n\n014_TQC-80perc.d\nRQC\n1\n0.8\nLPC 16:1\n905868\n\n\n015_TQC-100perc.d\nRQC\n1\n1.0\nLPC 16:1\n1085113"
  },
  {
    "objectID": "plotting_basics.html#plotting-one-curve",
    "href": "plotting_basics.html#plotting-one-curve",
    "title": "5  Plotting Basics",
    "section": "5.5 Plotting one curve",
    "text": "5.5 Plotting one curve\n\nggplot2base R\n\n\n\nggplot(d_forplot, aes(x = InjVol, y = Area)) + \n  geom_point(size =5, color=\"red\") +\n  #geom_line() +\n  scale_x_continuous(name = \"Injection Volume\", limits = c(-0.1, NA)) + \n  labs(title = \"Response of LPC 16:1\", y = \"Peak Area [CPS]\") +\n  geom_smooth(method = \"lm\",se = TRUE, color = \"blue\", linetype = \"dotted\") +\n  theme_light()\n\n\n\n\n\n\n\nplot(\n  x = d_forplot$InjVol,\n  y = d_forplot$Area,\n  pch = 16,\n  cex = 1.5,\n  col = \"red\",\n  xlab = \"Injection Volume\",\n  ylab = \"Peak Area [CPS]\",\n  main = \"Response of LPC 16:1\"\n)\nabline(lm(Area ~ InjVol, data = d_forplot), col = \"blue\")\n\n# more work will be needed to plot confidence intervals"
  },
  {
    "objectID": "plotting_basics.html#plotting-multiple-curves",
    "href": "plotting_basics.html#plotting-multiple-curves",
    "title": "5  Plotting Basics",
    "section": "5.6 Plotting multiple curves",
    "text": "5.6 Plotting multiple curves\n\n#Select data from one single lipid from ALL dilution curves\nd_forplot_2 <- d_rqc  |> filter(Lipid == \"LPC 16:1\")\n\nggplot(d_forplot_2, aes(x = InjVol, y = Area, color = factor(CurveNo))) + \n  geom_point(size =5) +\n  scale_x_continuous(name = \"Injection Volume\", limits = c(0, NA)) + \n  labs(title = \"Response of LPC 16:1\", y = \"Peak Area [CPS]\") +\n  geom_smooth(method = \"lm\", se = FALSE, linetype = \"dotted\") +\n  theme_light()"
  },
  {
    "objectID": "plotting_basics.html#faceted-plot-from-different-lipids-of-one-curve",
    "href": "plotting_basics.html#faceted-plot-from-different-lipids-of-one-curve",
    "title": "5  Plotting Basics",
    "section": "5.7 Faceted plot from different lipids of one curve",
    "text": "5.7 Faceted plot from different lipids of one curve\n\n#Select data from all LPCs from  dilution curve 1\nd_forplot_3 <- d_rqc  |> filter(str_detect(Lipid, \"LPC 2\"), CurveNo == 2)\n\nggplot(d_forplot_3, aes(x = InjVol, y = Area, color = factor(CurveNo))) + \n  geom_point(size = 2) +\n  scale_x_continuous(name = \"Injection Volume\", limits = c(0, NA)) + \n  labs(title = \"Response Curves\", y = \"Peak Area [CPS]\") +\n  geom_smooth(method = \"lm\", se = FALSE, linetype = \"dotted\", size = 0.6) +\n  facet_wrap(~Lipid, scales = \"free\") +\n  theme_light(base_size = 8)"
  },
  {
    "objectID": "plotting_basics.html#add-r2-to-the-plots",
    "href": "plotting_basics.html#add-r2-to-the-plots",
    "title": "5  Plotting Basics",
    "section": "5.8 Add \\(R^2\\) to the plots",
    "text": "5.8 Add \\(R^2\\) to the plots\n\n# Plot\nggplot(data = d_forplot_3, aes(x = InjVol, y = Area, \n                               group = factor(CurveNo))) +\n  stat_poly_line() +\n  stat_poly_eq(\n    aes(\n      label = after_stat(rr.label),\n      color = if_else(after_stat(r.squared) < 0.96, \"red\", \"black\")\n    ),\n  size = 2.4,\n  lineheight = 1111.5) +\n  scale_color_identity() +\n  scale_y_continuous(limits = c(0, NA)) +\n  facet_wrap( ~ Lipid, scales = \"free\") +\n  geom_point() + theme_light(base_size = 6)\n\n#> Warning: Removed 62 rows containing missing values (geom_smooth)."
  },
  {
    "objectID": "plotting_basics.html#faceted-plot-from-different-lipids-of-all-curves",
    "href": "plotting_basics.html#faceted-plot-from-different-lipids-of-all-curves",
    "title": "5  Plotting Basics",
    "section": "5.9 Faceted plot from different lipids of ALL curves",
    "text": "5.9 Faceted plot from different lipids of ALL curves\n\n#Select data from all LPCs from  dilution curve 1\nd_forplot_4 <- d_rqc  |> filter(str_detect(Lipid, \"LPC 2\"))\n\nggplot(d_forplot_4, aes(x = InjVol, y = Area, \n                        color = factor(CurveNo))) + \n  geom_point(size = 2) +\n  scale_x_continuous(name = \"Injection Volume\", limits = c(0, NA)) + \n  labs(title = \"Response Curves\", y = \"Peak Area [CPS]\") +\n  geom_smooth(method = \"lm\", se = FALSE, \n              linetype = \"dotted\", size = 0.6) +\n  facet_wrap(~Lipid, scales = \"free\") +\n  theme_light(base_size = 8)"
  },
  {
    "objectID": "plotting_basics.html#faceted-plots-over-multiple-pages",
    "href": "plotting_basics.html#faceted-plots-over-multiple-pages",
    "title": "5  Plotting Basics",
    "section": "5.10 Faceted plots over multiple pages",
    "text": "5.10 Faceted plots over multiple pages\nOne option is to use `ggforce::facet_wrap_paginate()` but this function can be slow and has some bugs with large datasets. Here an alternative way using *purrr::map()*\n\n# Define function to plot 1 page\nplot_page <-\n  function(d, rows_page, columns_page) {\n    ggplot(data = d, aes(x = InjVol , y = Area, group = factor(CurveNo))) +\n      stat_poly_line() +\n      stat_poly_eq(aes(\n        label = after_stat(rr.label),\n        color = ifelse(after_stat(r.squared) < 0.80, \"red\", \"darkgreen\")\n      ), size = 1.4) +\n      scale_color_identity() +\n      scale_y_continuous(limits = c(0, NA)) +\n      facet_wrap(vars(Lipid),\n      scales = \"free\",\n      nrow = rows_page,\n      ncol = columns_page) +\n      geom_point() + theme_light(base_size = 6)\n  }\n\n# Select all LPCs\nd_forplot_5 <- d_rqc  |> filter(str_detect(Lipid, \"LPC \"), CurveNo == 2)\n\n# Interate through pages\n\n\nrows_page = 4\ncolumns_page = 5\n\nd_rqc_grp <- d_forplot_5 %>%\n  left_join(tibble(Lipid = unique(.$Lipid)) |>\n              mutate(grp = ceiling(row_number() / (rows_page * columns_page)))) %>%\n  group_by(grp) %>%\n  nest() %>%\n  mutate(plt = map(data, ~ plot_page(.,rows_page =  rows_page, columns_page =  5)))\n\n# Print pages \n\nd_rqc_grp$plt\n\n#> [[1]]\n\n\n#> Warning: Removed 101 rows containing missing values (geom_smooth).\n\n\n#> \n#> [[2]]\n\n\n#> Warning: Removed 1 rows containing non-finite values (stat_poly_line).\n\n\n#> Warning: Removed 1 rows containing non-finite values (stat_poly_eq).\n\n\n#> Warning: Removed 56 rows containing missing values (geom_smooth).\n\n\n#> Warning: Removed 1 rows containing missing values (geom_point).\n\n# Save pages\n\n#pdf('pltALL.pdf', paper = \"A4r\")\n#d_rqc_grp$plt\n#dev.off()"
  },
  {
    "objectID": "barchart_lipidomics.html",
    "href": "barchart_lipidomics.html",
    "title": "6  Bar chart of lipid classes with contrasts",
    "section": "",
    "text": "Bar charts showing total composition per lipid class and statistical comparisons between groups are still often seen in the literature."
  },
  {
    "objectID": "barchart_lipidomics.html#libraries",
    "href": "barchart_lipidomics.html#libraries",
    "title": "6  Bar chart of lipid classes with contrasts",
    "section": "6.1 Libraries",
    "text": "6.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)"
  },
  {
    "objectID": "barchart_lipidomics.html#data-format",
    "href": "barchart_lipidomics.html#data-format",
    "title": "6  Bar chart of lipid classes with contrasts",
    "section": "6.2 Data format",
    "text": "6.2 Data format\nThe example below requires a tidy (‘long-format’) table. Following columns are will be used: SubjectID, Group, LipidClass and Conc. See chapters xxx on how to prepare data in this format. For this example a raw test dataset will be imported and converted into the tidy format. The the sum composition per lipid classes is calculated and then provided to ggsignif::geom_signif.\n\nd_long <- read_csv(here(\"data/Metabolites-1614644-supplementary.csv\")) |> \n  pivot_longer(cols = -SubjectID:-Group, names_to = \"Lipid\", values_to = \"Conc\")\n\nd_annot <- d_long |> \n  mutate(Lipid = str_replace(Lipid, \" O-\", \"-O \"), \n         Lipid = str_replace(Lipid, \" P-\", \"-P \")) |> \n  separate(col = Lipid, into = c(\"LipidClass\", \"chain\"), sep = \" \", remove = FALSE) \n\n#> Warning: Expected 2 pieces. Additional pieces discarded in 376 rows [131, 132,\n#> 183, 184, 419, 420, 471, 472, 707, 708, 759, 760, 995, 996, 1047, 1048, 1283,\n#> 1284, 1335, 1336, ...].\n\nd_sum <- d_annot |> \n  group_by(SubjectID, Group, LipidClass) |> \n  summarise(Conc = sum(Conc)) |>  \n  ungroup()\n\n\n\n\n\nTable 6.1: Test dataset in tidy format\n\n\nSubjectID\nGroup\nLipidClass\nConc\n\n\n\n\nCS_01\nCushing\nCE\n12000.82\n\n\nCS_01\nCushing\nCer\n7.46\n\n\nCS_01\nCushing\nDG\n76.85\n\n\nCS_01\nCushing\nGM3\n5.89\n\n\nCS_01\nCushing\nHex2Cer\n5.59"
  },
  {
    "objectID": "barchart_lipidomics.html#bar-chart-with-contrasts",
    "href": "barchart_lipidomics.html#bar-chart-with-contrasts",
    "title": "6  Bar chart of lipid classes with contrasts",
    "section": "6.3 Bar chart with contrasts",
    "text": "6.3 Bar chart with contrasts\nThe display of significance brackets of statistical comparisons without groups of a grouped bar chart needs a work- around when using the ggsignf package. In this case the significance levels and precise x and y coordinates have to be manually calculated and provided to ggsignif::geom_signif.\nIn this example below we use lipid class concentration normalized to the reference group.\n\n# OPTIONAL: Subset you dataset\nd_plot <- d_sum  # %>% filter(LipidClass %in% c(\"CE\",\"TG\",\"PC\", \"DG\", \"PE\")) \n\n\n# OPTIONAL: Normalize your data (by e.g. the reference group)\nd_plot <- d_plot |>\n  group_by(LipidClass) |>\n  mutate(Conc = Conc/mean(Conc[Group == \"Healthy\"]/100))\n  \n  \n# OPTIONAL: order your groups as you wish (otherwise it will be alphabetical)\nd_plot$Group <- factor(d_plot$Group, \n                       levels = c(\"Healthy\", \"Cushing\", \"Hypothyroidism\"))\n\n# OPTIONAL: define specific color for each group, \nmy_colors <- c(Healthy = \"grey80\", Cushing = \"red\", Hypothyroidism = \"#1b80a1\")\n\n\n# NOTE: define your contrasts here, or select all combinations\n#contrasts <- list(c(\"Cushing\", \"Healthy\"), c(\"Healthy\",\"Hypothyroidism\"))\ncontrasts <- combn(levels(d_plot$Group), 2, FUN = list) # All comb.\n\n# ---- Get p-values and brackets coordinates  -----\n\ngroup_levels <- levels(d_plot$Group)\nn_groups <- length(group_levels)\n\nget_pval <- function(d, contrasts) {\n  map_dfr(.x = contrasts,\n    .f = ~ broom::tidy(\n      t.test(formula = Conc ~ factor(Group),data = subset(d, Group %in% .x))) |>\n      mutate(id = paste0(.x, collapse = \"-\"),\n             grp1 = .x[1],\n             grp2 = .x[2],\n             y_max_1 = mean(d$Conc[d$Group == .x[1]])+sd(d$Conc[d$Group == .x[1]]),\n             y_max_2 = mean(d$Conc[d$Group == .x[2]])+sd(d$Conc[d$Group == .x[2]]),\n             y_max = max(y_max_1, y_max_2)))\n}\n\nd_stat <- d_plot |>\n  group_by(LipidClass) |> \n  nest() |> \n  mutate(res = map(.x = data, .f = \\(x) res = get_pval(x, contrasts))) |> \n  unnest(-data) |> \n  mutate(\n    p_val_sym = case_when(\n      p.value > 0.05 ~ \"\", p.value > 0.01 ~ \"*\", \n      p.value > 0.001 ~ \"**\", TRUE ~ \"***\"))|>\n  mutate(y_max = max(y_max)) |>\n  ungroup() |> \n  mutate(y_max_all = max(y_max)) |>\n  group_by(LipidClass) |> \n  mutate(\n    x_min = cur_group_id() - 0.8/n_groups * (match(grp1, group_levels)-2),\n    x_max = cur_group_id() - 0.8/n_groups * (match(grp2, group_levels)-2),\n    y_max = y_max + (y_max_all/30 * row_number() )\n  )  \n# ---- END of Get p-values and brackets coordinates  -----\n\n# The plotting function\nplt <- ggplot(d_plot, aes(x = LipidClass, y = Conc, fill = Group, color = Group)) + \n  geom_hline(yintercept = 100, color = \"green\", size=0.1) +\n  geom_bar(stat = \"summary\", fun.data = \"mean_sdl\", \n           position = 'dodge', width = 0.8, size  = 0) +\n  geom_errorbar(stat = \"summary\", fun.data = \"mean_sdl\", fun.args = list(mult = 1), \n                width = 0.5, position = position_dodge(width=0.8), size = 0.1) + \n  scale_y_continuous(limits = c(0,NA), expand = expansion(mult = c(0, .10)))+\n  scale_color_manual(values = my_colors) +\n  scale_fill_manual(values = my_colors) +\n\n  ggsignif::geom_signif(\n    y_position = d_stat$y_max,\n    xmin = d_stat$x_min,\n    xmax = d_stat$x_max,\n    annotation = d_stat$p_val_sym,\n    margin_top = 0.05, step_increase = 1.1, vjust = 0.5, size = 0.2,\n    tip_length = 0.005, textsize = 2, color = \"black\") +\n  theme_light(base_size = 8) + \n  theme(\n    axis.text.x = element_text( size=9, angle = 45,vjust = 1, hjust = 1),\n    panel.grid = element_blank(),\n    legend.key.size = unit(3,units = \"mm\"),\n    #legend.position=c(0.93, .87),\n    legend.title=element_blank()) +\n  ylab(\"Relative abundance vs Reference\")\n\nplt  \n\n#ggsave(plot = plt, filename = \"barchart.png\", \n#       width = 183, height = 90,units = \"mm\",  dpi = 300)\n\n\n\n\nCompare this to plotting non-normalized concentrations"
  },
  {
    "objectID": "dotplot_lipidomics.html#libraries",
    "href": "dotplot_lipidomics.html#libraries",
    "title": "7  Box/dot plots with Contrasts",
    "section": "7.1 Libraries",
    "text": "7.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)"
  },
  {
    "objectID": "dotplot_lipidomics.html#data-format",
    "href": "dotplot_lipidomics.html#data-format",
    "title": "7  Box/dot plots with Contrasts",
    "section": "7.2 Data Format",
    "text": "7.2 Data Format\nThe examples below require a tidy (‘long-format’) table with following columns: SubjectID, Group, Lipid and Conc. See chapters xxxx on how to prepare data in this format. In this example a test dataset is used that is converted into the tidy format.\n\n# Load and format test data\nd_long <- read_csv(here(\"data/Metabolites-1614644-supplementary.csv\")) |> \n  pivot_longer(cols = -c(SubjectID, Group), names_to = \"Lipid\", values_to = \"Conc\")\n\n\n\n\n\nTable 7.1: Test data in tidy format\n\n\nSubjectID\nGroup\nLipid\nConc\n\n\n\n\nHB_01\nHealthy\nCE 16:0\n36.82\n\n\nHB_01\nHealthy\nCE 17:0\n1.02\n\n\nHB_01\nHealthy\nCE 17:1\n1.34\n\n\nHB_01\nHealthy\nCE 18:0\n12.34\n\n\nHB_01\nHealthy\nCE 18:1\n573.83"
  },
  {
    "objectID": "dotplot_lipidomics.html#single-faceted-boxdot-plot",
    "href": "dotplot_lipidomics.html#single-faceted-boxdot-plot",
    "title": "7  Box/dot plots with Contrasts",
    "section": "7.3 Single faceted box/dot plot",
    "text": "7.3 Single faceted box/dot plot\nThis is for one page (means one plot with n rows and m columns)\n\n# OPTIONAL: order your groups as you wish (otherwise it will be alphabetical)\nd_long$Group <- factor(d_long$Group, \n                       levels = c(\"Healthy\", \"Cushing\", \"Hypothyroidism\"))\n\n# OPTIONAL: define specific color for each group, \nmy_colors <- c(Healthy = \"grey50\", Cushing = \"red\", Hypothyroidism = \"#1b80a1\")\n\n# OPTIONAL: Subset your data\nd_plot <- d_long |> filter(str_detect(Lipid, \"CE\"))\n\n\n# IMPORTANT: Change variable names to match your data (i.e. Group, Conc, Lipid)\n# IMPORTANT: Change group names and add/remove comparisons in `ggsignif()`\nggplot(d_plot, aes(x = Group, y = Conc, color = Group,fill = Group)) + \n  geom_boxplot(alpha = 0.2, lwd=0.3, outlier.shape = NA) +\n  geom_jitter(size = 0.5,width = 0.2) +\n  facet_wrap(~Lipid, scales = \"free\", nrow = 4, ncol = 5) + \n  scale_y_continuous(limits = c(0,NA), expand = expansion(mult = c(0, .15)))+\n  scale_color_manual(values = my_colors) +\n  scale_fill_manual(values = my_colors) +\n  ggsignif::geom_signif(\n    comparisons = list(\n      c(\"Healthy\", \"Cushing\") ,\n      c(\"Cushing\", \"Hypothyroidism\"), \n      c(\"Healthy\", \"Hypothyroidism\")\n    ), \n    test = \"t.test\", \n    test.args = list(paired=FALSE, var.equal = FALSE, na.rm = TRUE), \n    map_signif_level = c(\"***\"=0.001, \"**\"=0.01, \"*\"=0.05, \" \" = 1),\n    margin_top = 0.05, step_increase = 0.1, vjust = 0.5, size = 0.2, \n    tip_length = 0.05, textsize = 4, color = \"black\") +\n  theme_bw(base_size = 7) + \n  theme(\n    axis.text.x = element_text( size=6, angle = 45,vjust = 1, hjust = 1),\n    panel.grid = element_blank(),\n    legend.position=\"none\"\n  )"
  },
  {
    "objectID": "dotplot_lipidomics.html#multi-page-faceted-boxdot-plot",
    "href": "dotplot_lipidomics.html#multi-page-faceted-boxdot-plot",
    "title": "7  Box/dot plots with Contrasts",
    "section": "7.4 Multi-page faceted box/dot plot",
    "text": "7.4 Multi-page faceted box/dot plot\nHere we make the same plots as before but over multiple pages/figures, like this we can make boxplots for each lipid If you adopt this for your own data, you need to set number of plots per page (number of rows and columns), also you need to update it with your group names and colors.\n\n# Order the groups as you wish (otherwise it will be alphabetical), if you are \nd_long$Group <- factor(d_long$Group, \n                       levels = c(\"Healthy\", \"Cushing\", \"Hypothyroidism\"))\n\n# Define your color for each group, \n# can also get colors (e.g. #1b80a1) via e.g. https://g.co/kgs/DQH6Fr\nmy_colors <- c(Healthy = \"grey50\", Cushing = \"red\", Hypothyroidism = \"#1b80a1\")\n\n\n# In this example we subet to have 3 pages, remove the filter for all lipids\nd_plot <- d_long |> filter(str_detect(Lipid, \"LPC|LPE\"))\n\n# Define a function to plot one faceted plot (=one page)\nplot_one_page <- function(data, n_row, n_col){\n  ggplot(data, aes(x = Group, y = Conc, color = Group,fill = Group)) + \n    geom_boxplot(alpha = 0.2, lwd=0.3, outlier.shape = NA) +\n    geom_jitter(size = 0.5,width = 0.2) +\n    facet_wrap(~Lipid, scales = \"free\", nrow = n_row, ncol = n_col) + \n    scale_y_continuous(limits = c(0,NA), expand = expansion(mult = c(0, .15)))+\n    scale_color_manual(values = my_colors) +\n    scale_fill_manual(values = my_colors) +\n    ggsignif::geom_signif(\n      comparisons = list(\n        c(\"Healthy\", \"Cushing\") ,\n        c(\"Cushing\", \"Hypothyroidism\"), \n        c(\"Healthy\", \"Hypothyroidism\")\n      ), \n      test = \"t.test\", \n      test.args = list(paired=FALSE, var.equal = FALSE, na.rm = TRUE), \n      map_signif_level = c(\"***\"=0.001, \"**\"=0.01, \"*\"=0.05, \" \" = 1),\n      margin_top = 0.05, step_increase = 0.1, vjust = 0.5, size = 0.2, \n      tip_length = 0.05, textsize = 4, color = \"black\") +\n    theme_bw(base_size = 7) + \n    theme(\n      axis.text.x = element_text( size=6, angle = 45,vjust = 1, hjust = 1),\n      panel.grid = element_blank(),\n      legend.position=\"none\"\n    )\n}\n\n# Set how many plots per page (number of rows and columns)\nrows_page = 3\ncolumns_page = 5\n\nmy_plots <- d_plot %>%\n  group_by(Lipid) |> \n  mutate(page_no = ceiling(cur_group_id()/ (rows_page * columns_page))) |> \n  group_by(page_no) %>%\n  nest() %>%\n  mutate(plt = map(data, ~ plot_one_page(.,n_row = rows_page, n_col = columns_page)))\n\nmy_plots$plt\n\n\n\n\n\n\n\n\n\n\nSave multi-page plot a PDF\n\npdf(file = \"myplot.pdf\", onefile = TRUE, paper = \"A4r\", width = 11)\nmy_plots$plt\ndev.off()"
  },
  {
    "objectID": "dilution_series.html#libraries",
    "href": "dilution_series.html#libraries",
    "title": "8  Regressions for many lipids",
    "section": "8.1 Libraries",
    "text": "8.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(ggpmisc)"
  },
  {
    "objectID": "dilution_series.html#overview-lm-and-broom-package",
    "href": "dilution_series.html#overview-lm-and-broom-package",
    "title": "8  Regressions for many lipids",
    "section": "8.2 Overview lm and ‘broom’ package",
    "text": "8.2 Overview lm and ‘broom’ package\n\nd_test <- tibble(InjVol = c(0,0.2, 0.4, 0.6, 0.8,1),\n                  Response  = c(12, 23, 34,44, 89, 101)) \n                 \nd_test\n\n#> # A tibble: 6 × 2\n#>   InjVol Response\n#>    <dbl>    <dbl>\n#> 1    0         12\n#> 2    0.2       23\n#> 3    0.4       34\n#> 4    0.6       44\n#> 5    0.8       89\n#> 6    1        101\n\n# Linear model\nmodel <- lm(formula = Response ~ InjVol, data = d_test)\n\n# Get result summary\nsummary(model)\n\n#> \n#> Call:\n#> lm(formula = Response ~ InjVol, data = d_test)\n#> \n#> Residuals:\n#>        1        2        3        4        5        6 \n#>   8.1429   0.4857  -7.1714 -15.8286  10.5143   3.8571 \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)   \n#> (Intercept)    3.857      8.043   0.480  0.65656   \n#> InjVol        93.286     13.282   7.024  0.00216 **\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 11.11 on 4 degrees of freedom\n#> Multiple R-squared:  0.925,  Adjusted R-squared:  0.9062 \n#> F-statistic: 49.33 on 1 and 4 DF,  p-value: 0.002165\n\n# Get r^2 only\nsummary(model)$r.squared\n\n#> [1] 0.9249954\n\n# Using broom functions to summarize model results into a table\nbroom::glance(model) \n\n#> # A tibble: 1 × 12\n#>   r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n#>       <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n#> 1     0.925         0.906  11.1      49.3 0.00216     1  -21.7  49.5  48.9\n#> # … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\nbroom::tidy(model) \n\n#> # A tibble: 2 × 5\n#>   term        estimate std.error statistic p.value\n#>   <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n#> 1 (Intercept)     3.86      8.04     0.480 0.657  \n#> 2 InjVol         93.3      13.3      7.02  0.00216"
  },
  {
    "objectID": "dilution_series.html#import-datasets",
    "href": "dilution_series.html#import-datasets",
    "title": "8  Regressions for many lipids",
    "section": "8.3 Import Datasets",
    "text": "8.3 Import Datasets\n\nd_orig <- read_csv(here(\"data/Testdata_Lipidomics_flat_wide_annotated_V1.csv\"))"
  },
  {
    "objectID": "dilution_series.html#prepare-data",
    "href": "dilution_series.html#prepare-data",
    "title": "8  Regressions for many lipids",
    "section": "8.4 Prepare Data",
    "text": "8.4 Prepare Data\n\n# Convert to long format\n\n# Convert to long format\nd_long <- d_orig |> \n  pivot_longer(cols = -DataFileName:-InjVol, \n               names_to = \"Lipid\" , \n               values_to = \"Area\")\n\n# Get a table with RQCs only and sort by Lipid\nd_rqc <- d_long |> \n  filter(QCtype == \"RQC\") |> \n  arrange(Lipid)"
  },
  {
    "objectID": "dilution_series.html#run-regression-for-each-lipid",
    "href": "dilution_series.html#run-regression-for-each-lipid",
    "title": "8  Regressions for many lipids",
    "section": "8.5 Run regression for each lipid",
    "text": "8.5 Run regression for each lipid\nIn this example a logistic regression is used. The output of glm() is converted to a tidy table using the broom::tidy() function.\n\nmodel <- as.formula(\"Area ~ InjVol\")\n\nd_res <- d_rqc %>%\n  group_by(Lipid) %>%\n  nest() %>%\n  mutate(\n    models = map(data, function(x) lm(model, data = x)), \n    #mandel = map(data, \\(x) DCVtestkit::calculate_mandel(x, \"InjVol\", \"Area\")),\n    #ppa = map(data, \\(x) DCVtestkit::calculate_pra_linear(x, \"InjVol\", \"Area\")),\n    tidy = map(models, function(x) broom::glance(x))) |> \n  unnest(c(tidy)) |> \n  dplyr::select(-data, -models)\n\n# Fix DCVtestkit::calculate_pra_linear currently returning a list instead vector\n# d_res$ppa <- unlist(d_res$ppa)\n\nThe results contain the combined estimates, errors, and P values for each term for each lipid species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLipid\nr.squared\nadj.r.squared\nsigma\nstatistic\np.value\ndf\nlogLik\nAIC\nBIC\ndeviance\ndf.residual\nnobs\n\n\n\n\nCE 16:0\n0.626274\n0.602917\n44054.0359\n26.81215\n0.000092\n1\n-216.9579\n439.9159\n442.5870\n3.105213e+10\n16\n18\n\n\nCE 16:1\n0.834197\n0.823834\n8622.1216\n80.50006\n0.000000\n1\n-187.5984\n381.1968\n383.8679\n1.189456e+09\n16\n18\n\n\nCE 16:2\n0.609873\n0.585490\n585.7358\n25.01226\n0.000131\n1\n-139.1925\n284.3850\n287.0561\n5.489383e+06\n16\n18\n\n\nCE 17:0\n0.900585\n0.894371\n1178.0217\n144.94082\n0.000000\n1\n-151.7695\n309.5390\n312.2101\n2.220376e+07\n16\n18\n\n\nCE 17:1\n0.945373\n0.941959\n1914.1239\n276.89543\n0.000000\n1\n-160.5071\n327.0142\n329.6854\n5.862192e+07\n16\n18\n\n\nCE 18:0\n0.952998\n0.950061\n8748.1092\n324.41314\n0.000000\n1\n-187.8595\n381.7190\n384.3902\n1.224471e+09\n16\n18\n\n\nCE 18:1\n0.944273\n0.940791\n522750.3432\n271.11631\n0.000000\n1\n-261.4843\n528.9686\n531.6397\n4.372287e+12\n16\n18\n\n\nCE 18:1 d7 (ISTD)\n0.922337\n0.917483\n60313.2929\n190.01887\n0.000000\n1\n-222.6124\n451.2248\n453.8959\n5.820309e+10\n16\n18\n\n\nCE 18:2\n0.950589\n0.947501\n2583852.0035\n307.81495\n0.000000\n1\n-290.2471\n586.4942\n589.1653\n1.068207e+14\n16\n18\n\n\nCE 18:3\n0.767452\n0.752918\n88635.9222\n52.80302\n0.000002\n1\n-229.5421\n465.0842\n467.7553\n1.257012e+11\n16\n18"
  },
  {
    "objectID": "multiple_models.html#libraries",
    "href": "multiple_models.html#libraries",
    "title": "9  Multivariate Regression",
    "section": "9.1 Libraries",
    "text": "9.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SLINGtools)\nlibrary(broom)\nlibrary(ggrepel)"
  },
  {
    "objectID": "multiple_models.html#import-datasets",
    "href": "multiple_models.html#import-datasets",
    "title": "9  Multivariate Regression",
    "section": "9.2 Import Datasets",
    "text": "9.2 Import Datasets\n\nd_meta <- read_csv(here(\"data/ISLS10_Part2_metadata.csv\"))\nd_wide <- read_csv(here(\"data/ISLS10_Part2_lipidomics_curated.csv\"))"
  },
  {
    "objectID": "multiple_models.html#prepare-data",
    "href": "multiple_models.html#prepare-data",
    "title": "9  Multivariate Regression",
    "section": "9.3 Prepare Data",
    "text": "9.3 Prepare Data\n\n# Convert to long format\nd_long <- d_wide |>\n  pivot_longer(cols = -ID, names_to = \"Compound\" , values_to = \"Conc\")\n\n# Combine data and metadata\nd_full <- d_meta |> left_join(d_long, by = \"ID\")\n\n# log-transform and scale (z-score) data\nd_full <- d_full |>\n  group_by(Compound) |>\n  mutate(Conc_log = log2(Conc),\n         Conc_logz = as.numeric(scale(Conc_log)))"
  },
  {
    "objectID": "multiple_models.html#run-regression-for-each-lipid",
    "href": "multiple_models.html#run-regression-for-each-lipid",
    "title": "9  Multivariate Regression",
    "section": "9.4 Run regression for each lipid",
    "text": "9.4 Run regression for each lipid\nIn this example a logistic regression is used. The output of glm() is converted to a tidy table using the broom::tidy() function.\n\nmodel <- as.formula(\"DM ~ Age + Gender + BMI + HbA1c + \n                    SBP + HDL + LDL + TG + Conc_logz\")\n\nd_res <- d_full %>%\n  group_by(Compound) %>%\n  nest() %>%\n  mutate(\n    models = map(data, function(x) glm(model, data = x, family = \"binomial\")), \n    tidy = map(models, function(x) broom::tidy(x))) |> \n  unnest(tidy) |> \n  dplyr::select(-data, -models)\n\nThe results contain the combined estimates, errors, and P values for each term for each lipid species.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompound\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\nCer d16:1/16:0\n(Intercept)\n-20.955219\n1.886056\n-11.110601\n0.000000\n\n\nCer d16:1/16:0\nAge\n0.032885\n0.010896\n3.017987\n0.002545\n\n\nCer d16:1/16:0\nGender\n0.593323\n0.217179\n2.731950\n0.006296\n\n\nCer d16:1/16:0\nBMI\n0.129663\n0.027600\n4.698024\n0.000003\n\n\nCer d16:1/16:0\nHbA1c\n2.041818\n0.281859\n7.244102\n0.000000\n\n\nCer d16:1/16:0\nSBP\n0.017569\n0.005370\n3.271562\n0.001070\n\n\nCer d16:1/16:0\nHDL\n-0.725890\n0.368385\n-1.970465\n0.048785\n\n\nCer d16:1/16:0\nLDL\n-0.247450\n0.128041\n-1.932579\n0.053288\n\n\nCer d16:1/16:0\nTG\n0.402731\n0.142030\n2.835530\n0.004575\n\n\nCer d16:1/16:0\nConc_logz\n0.197851\n0.113746\n1.739413\n0.081962\n\n\n\n\n\nTo get the effects and P values for the lipids we filter for the term Conc_logz. We futhermore get the adjusted P values (FDR).\n\nd_res_lipids <- d_res |> \n   filter(term == \"Conc_logz\") |> \n   mutate(FDR = p.adjust(p.value, method = \"fdr\")) |> \n   arrange(FDR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompound\nterm\nestimate\nstd.error\nstatistic\np.value\nFDR\n\n\n\n\nSM d16:1/18:0\nConc_logz\n0.408832\n0.119650\n3.416896\n0.000633\n0.000633\n\n\nSM d18:1/18:0\nConc_logz\n0.325500\n0.105045\n3.098661\n0.001944\n0.001944\n\n\nCer d18:0/18:0\nConc_logz\n0.427791\n0.139298\n3.071052\n0.002133\n0.002133\n\n\nHex1Cer d18:2/25:0\nConc_logz\n-0.255110\n0.092979\n-2.743742\n0.006074\n0.006074\n\n\nCer d18:1/18:0\nConc_logz\n0.316480\n0.119278\n2.653288\n0.007971\n0.007971\n\n\nSM d18:1/20:0\nConc_logz\n0.282201\n0.106676\n2.645399\n0.008159\n0.008159"
  },
  {
    "objectID": "multiple_models.html#forest-plot",
    "href": "multiple_models.html#forest-plot",
    "title": "9  Multivariate Regression",
    "section": "9.5 Forest Plot",
    "text": "9.5 Forest Plot\nPrepare data for the plot: get lipid class from lipid names, join it to the data frame, calculate FDR, get upper/lower errors, and set “significant specie”\n\n# lipid annotation\nd_lipid_annot <- d_res_lipids |>\n  select(Compound) |>  \n  separate(Compound, \n           into = c(\"lipid_class\", \"fa_chain\"), \n           remove = FALSE, \n           extra = \"drop\",\n           fill = \"right\",  \n           sep = \"/\" )\n\nd_plot <- d_res_lipids |> \n  full_join(d_lipid_annot, by = \"Compound\") |> \n  mutate(\n    est_low = estimate - std.error,\n    est_high = estimate + std.error, \n    signif = FDR < 0.05,\n    label = if_else(signif, fa_chain, \"\")) |> \n  arrange(signif)\n\nPlot estimates of all lipid species, grouped by lipid class, highlighting significant species in red and label them by the FA chain.\n\nggplot(d_plot, aes(x = lipid_class, y = estimate,color = signif, label = label)) +\n  geom_hline(yintercept = 0) +\n  geom_pointrange(aes(ymin = est_low, ymax = est_high, alpha = signif),\n                  size = 0.5,\n                  position = position_jitter(width = .3, height = 0)) +\n  coord_flip() +\n  scale_color_manual(values = c(\"FALSE\" = \"grey70\", \"TRUE\" = \"red\")) +\n  scale_alpha_manual(values = c(\"FALSE\" = 0.3, \"TRUE\" = 1)) +\n  ggrepel::geom_text_repel(\n    aes(y = estimate),\n    size = 2,\n    max.overlaps = 5,\n    point.padding = .7\n  ) +\n  theme_bw() + \n  theme(legend.position=\"none\")\n\n\n\n\nFigure 1. Forest plot of logistic regression (DM ~ Age + Gender + BMI + HbA1c + SBP + HDL + LDL + TG + Lipid). Species with FDR > 0.05 are highlighted in red."
  },
  {
    "objectID": "import_MSdatasets.html",
    "href": "import_MSdatasets.html",
    "title": "10  Read MS datasets into R",
    "section": "",
    "text": "Pre-processed MS datasets refers to data exported from MS rawdata processing software, such as Agilent MassHunter, Sciex Multiquant, and open-source tools as MRMkit and Skyline. These datasets usually contain peak/signal intensities and associated data such as retention time, FWHM, as well as information about the sample.\nThe R package SLINGtools provided helper functions to import data files obtained from different tools."
  },
  {
    "objectID": "import_MSdatasets.html#import-peak-areas-from-agilent-masshunter-csv-file",
    "href": "import_MSdatasets.html#import-peak-areas-from-agilent-masshunter-csv-file",
    "title": "10  Read MS datasets into R",
    "section": "10.1 Import peak areas from Agilent MassHunter CSV file",
    "text": "10.1 Import peak areas from Agilent MassHunter CSV file\n\n\nlibrary(SLINGtools)\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_MHQuant_Detailed_V2.csv\")\nd_wide <- SLINGtools::read_MassHunterCSV_wide(data_file_path, field = \"Area\")\n\nReading 'Testdata_Lipidomics_MHQuant_Detailed_V2.csv' ... \n\nindexing Testdata_Lipidomics_MHQuant_Detailed_V2.csv [======] 2.15GB/s, eta:  0s\n                                                                                \nImported  215 samples with 428 transitions \n\nprint(d_wide)\n\n# A tibble: 215 × 432\n   DataFileName  AcqTimeStamp        SampleType VialPosition `CE 14:0` `CE 15:0`\n   <chr>         <dttm>              <chr>      <chr>            <dbl>     <dbl>\n 1 001_EQC_TQC … 2018-04-12 18:28:00 EQC        Vial 2            1532       515\n 2 002_EQC_TQC … 2018-04-12 18:39:00 EQC        Vial 2            1029       911\n 3 003_EQC_TQC … 2018-04-12 18:51:00 EQC        Vial 2             685       649\n 4 004_EQC_TQC … 2018-04-12 19:02:00 EQC        Vial 2            1283       576\n 5 005_EQC_TQC … 2018-04-12 19:13:00 EQC        Vial 2             946       732\n 6 006_EBLK_Ext… 2018-04-12 19:25:00 PBLK       P1-A1              132        75\n 7 007_SOLV_Bla… 2018-04-12 19:36:00 SBLK       Vial 1             241        56\n 8 008_LTR_LTR0… 2018-04-12 19:48:00 LTR        P1-A2             1118       905\n 9 009_NIST_NIS… 2018-04-12 19:59:00 NIST       P1-A3             1499       482\n10 010_TQCd-0_T… 2018-04-12 20:11:00 RQC        Vial 4              77        96\n# … with 205 more rows, and 426 more variables: `CE 16:0` <dbl>,\n#   `CE 16:1` <dbl>, `CE 16:2` <dbl>, `CE 17:0` <dbl>, `CE 17:1` <dbl>,\n#   `CE 18:0` <dbl>, `CE 18:1` <dbl>, `CE 18:1 d7 (ISTD)` <dbl>,\n#   `CE 18:2` <dbl>, `CE 18:3` <dbl>, `CE 20:1` <dbl>, `CE 20:2` <dbl>,\n#   `CE 20:3` <dbl>, `CE 20:4` <dbl>, `CE 20:5` <dbl>, `CE 22:0` <dbl>,\n#   `CE 22:1` <dbl>, `CE 22:4` <dbl>, `CE 22:5` <dbl>, `CE 22:6` <dbl>,\n#   `CE 24:4` <dbl>, `Cer d18:0/16:0` <dbl>, `Cer d18:0/18:0` <dbl>, …"
  },
  {
    "objectID": "import_MSdatasets.html#import-all-data-from-an-agilent-masshunter-csv-file",
    "href": "import_MSdatasets.html#import-all-data-from-an-agilent-masshunter-csv-file",
    "title": "10  Read MS datasets into R",
    "section": "10.2 Import all data from an Agilent MassHunter CSV file",
    "text": "10.2 Import all data from an Agilent MassHunter CSV file\nDetail MassHunter Quant.\n\n\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_MHQuant_Detailed_V2.csv\")\nd_all_long <- SLINGtools::read_MassHunterCSV(data_file_path)\n\nReading 'Testdata_Lipidomics_MHQuant_Detailed_V2.csv' ... \n\nindexing Testdata_Lipidomics_MHQuant_Detailed_V2.csv [======] 2.15GB/s, eta:  0s\n                                                                                \nImported  215 samples with 428 transitions \n\nprint(d_all_long)\n\n# A tibble: 92,020 × 14\n   DataFileName     DataName SampleType AcqTimeStamp        VialPosition Feature\n   <chr>            <chr>    <chr>      <dttm>              <chr>        <chr>  \n 1 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 14:0\n 2 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 15:0\n 3 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:0\n 4 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:1\n 5 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:2\n 6 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 17:0\n 7 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 17:1\n 8 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 18:0\n 9 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 18:1\n10 001_EQC_TQC pre… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 18:…\n# … with 92,010 more rows, and 8 more variables: IonPolarity <fct>,\n#   PrecursorMZ <dbl>, ProductMZ <dbl>, CollisionEnergy <dbl>, RT <dbl>,\n#   Area <dbl>, FWHM <dbl>, MI <lgl>"
  }
]