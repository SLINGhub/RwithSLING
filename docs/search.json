[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RwithSLING",
    "section": "",
    "text": "In this online book you will find notes and recipes prepared during the RwithSLING workshop sessions in 2022 at the Singapore Lipidomics Incubator (SLING) @ NUS\nThese RwithSLING workshop sessions are aimed as an applied quick-start into the usage of R in the processing, management and analysis of dataset handled in the lab. Focus is on mass spectrometry (MS)-based lipidomics datasets and study metadata.\nThese notes were prepared before and after workshop sessions, covering topics discussed among the workshop participants. We try to include frequent questions, challenges, pitfalls and possible solutions. The books is structured into two parts, (i) general topics and (ii) specific recipes to specific data processing scenarios in the lab.\nFeedback and contributions are very welcome!"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Following software need to be installed on your computer to work with the examples shown in this online book:\n\nR Version 4.1 (or higher) https://cloud.r-project.org/. Check your R version by running following command in your console: ::: {.cell}\nR.Version()$version.string\n\n#> [1] \"R version 4.2.0 (2022-04-22 ucrt)\"\n\n:::\nRStudio Version 2022.02 or higher https://www.rstudio.com/products/rstudio/download/#download. Check your RStudio version by either looking clicking About RStudio under the menu Help, or by running following command in your console\n\nrstudioapi::versionInfo()$version\n\n\nFollowing software are only needed for specific chapters/examples:\n\nGit https://git-scm.com/downloads\nFor Windows: Rtools <https://cran.r-project.org/bin/windows/Rtools/"
  },
  {
    "objectID": "intro.html#frequently-used-r-packages",
    "href": "intro.html#frequently-used-r-packages",
    "title": "1  Introduction",
    "section": "1.2 Frequently used R packages",
    "text": "1.2 Frequently used R packages\nSee also @ref(Installing R packages)\nFollowing R packages will be often used in the given examples and it is thus recommended to install them before starting with this book\n\nhere\ntidyverse(installs ggplot2, dplyr, tidyr, tibble, readr, forcats, stringr, purrr)\nreadxl\nremotes\n\nRun this in your R command line to install these packages:\n\npkg_list <- c(\"here\", \"tidyverse\", \"readxl\", \"remotes\")\ninstall.packages(pkg_list)"
  },
  {
    "objectID": "import_data.html",
    "href": "import_data.html",
    "title": "2  Import data into R",
    "section": "",
    "text": "Verify the integrity of your data files and imported data - do not just assume all is fine\n\n\n\nData analysis projects often start by importing data from files. It is easier to start with clearly structured, clean and consistent data files:\n\nTidy data: observations (e.g. samples) as rows, variables (e.g. compounds) as columns\nFirst row contains column names\nNo nested columns and rows\nNo text before and after the table\n\nWe will be using readr (from tidyverse) and readxl packages in this chapter:\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)"
  },
  {
    "objectID": "import_data.html#read-csv-files",
    "href": "import_data.html#read-csv-files",
    "title": "2  Import data into R",
    "section": "2.2 Read CSV files",
    "text": "2.2 Read CSV files\nHint: Inspect the summery provided by read_csv() to verify correct data types were assigned\n\nd_wide <- read_csv(file = here(\"data/Testdata_Lipidomics_flat_wide_V2.csv\"), \n                   col_names = TRUE, \n                   trim_ws = TRUE)\n\n#> Rows: 215 Columns: 430\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr    (3): DataFileme, SPLType, VialPosition\n#> dbl  (426): CE 14:0, CE 15:0, CE 16:0, CE 16:1, CE 16:2, CE 17:0, CE 17:1, C...\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo remove white-spaces before and after text, set trim_ws = TRUE."
  },
  {
    "objectID": "import_data.html#read-excel-tables",
    "href": "import_data.html#read-excel-tables",
    "title": "2  Import data into R",
    "section": "2.3 Read Excel tables",
    "text": "2.3 Read Excel tables\nImporting Excel tables can be done via the package s readxl. Note: you will need to define which sheet to import (e.g. below Sheet1).\n\nlibrary(readxl)\nd_wide <- read_xlsx(path = here::here(\"data/Testdata_Lipidomics_flat_wide_V2.xlsx\"),\n                            sheet = \"Sheet1\",\n                            trim_ws = TRUE, \n                            na = c(\"ND\"))\nprint(d_wide)\n\n#> # A tibble: 215 × 432\n#>   DataFileName          AcqTimeStamp SampleType VialPosition `CE 14:0` `CE 15:0`\n#>   <chr>                 <chr>        <chr>      <chr>            <dbl>     <dbl>\n#> 1 001_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1532       515\n#> 2 002_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1029       911\n#> 3 003_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2             685       649\n#> 4 004_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2            1283       576\n#> 5 005_EQC_TQC prerun 0… 2018-04-12T… EQC        Vial 2             946       732\n#> 6 006_EBLK_Extracted B… 2018-04-12T… PBLK       P1-A1              132        NA\n#> # … with 209 more rows, and 426 more variables: `CE 16:0` <dbl>,\n#> #   `CE 16:1` <dbl>, `CE 16:2` <dbl>, `CE 17:0` <chr>, `CE 17:1` <dbl>,\n#> #   `CE 18:0` <dbl>, `CE 18:1` <dbl>, `CE 18:1 d7 (ISTD)` <dbl>, …\n\n\n\n\n\n\n\n\nVerify integrity of imported data\n\n\n\n\nDo not assume imported data fine without having reason to do so\nEnsure data types were correctly assigned\nEnsure missing values are correctly handled"
  },
  {
    "objectID": "import_data.html#data-types",
    "href": "import_data.html#data-types",
    "title": "2  Import data into R",
    "section": "2.4 Data Types",
    "text": "2.4 Data Types\n\nNote: read_csv() or read_xlsx() will by default guess the data type of each column.\nTypical data types are numbers (dbl), text (chr), logical (lgl) and factor (fct)\nYou can define the column types already at import (see ?read_csv)."
  },
  {
    "objectID": "import_data.html#missing-values",
    "href": "import_data.html#missing-values",
    "title": "2  Import data into R",
    "section": "2.5 Missing Values",
    "text": "2.5 Missing Values\n\nData files often contain missing values, i.e. as empty cells.\nread_csv() or read_xlsx() assign empty/missing values as NA (Not Available).\nMissing values will in general not affect to data type guessed by read_csv()\nException: Column contains only massing values, in this case it will be of type logical\nHowever, if data files contain specific text values for missing values (e.g.,“ND”,”LOD”, “na”), then read_csv() or read_xlsx() assign the column by default as character (text)\n\nResults from e.g. clinical chemistry, frequently indicate not available data with a short text such as “clotted”, “hemolytic”, “no received” to explain why a value was not reported. What happens when we import such a file using read_csv with default parameters:\n\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_flat_wide_with_differentNA_V2.csv\")\nd_wide <- readr::read_csv(data_file_path, trim_ws = TRUE)\n\n#> Rows: 215 Columns: 432\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (109): DataFileNDme, SampleType, VialPosition, CE 15:0, CE 16:0, CE 17:...\n#> dbl  (320): CE 14:0, CE 16:1, CE 17:1, CE 18:0, CE 18:1, CE 18:1 d7 (ISTD), ...\n#> lgl    (2): CE 16:2, LPC 16:0\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nread_csv() was mislead by the presence of unknown text values and guessed the data types wrongly as <char> for some columns.\nWe also have two columns of the type <lgl>, which stand for logical (TRUE/FALSE). In this case all peak areas of CE 16:2 were missing, and read_csv has no way to guess the intended data type. In which case it chooses <lgl> will be chosen as default.\nWe will not be able to perform any calculations for columns that are text or logical.\nWe need to explicitly tell R which values to interpret as missing values (NA).\nWe can do by providing the na parameter a list of texts that should be interpreted as NA :\n\n\ndata_file_path <- here::here(\"data/Testdata_Lipidomics_flat_wide_with_differentNA_V2.csv\")\nd_wide <- readr::read_csv(data_file_path, \n                          trim_ws = TRUE, \n                          na = c(\"ND\", \"LOD\"))\n\n#> Warning: One or more parsing issues, see `problems()` for details\n\n\n#> Rows: 215 Columns: 432\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr    (3): DataFileNDme, SampleType, VialPosition\n#> dbl  (425): CE 14:0, CE 15:0, CE 16:0, CE 16:1, CE 17:0, CE 17:1, CE 18:0, C...\n#> lgl    (3): CE 16:2, Cer d18:2/24:0, LPC 16:0\n#> dttm   (1): AcqTimeStamp\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(d_wide)\n\n#> # A tibble: 215 × 432\n#>   DataFileNDme   AcqTimeStamp        SampleType VialPosition `CE 14:0` `CE 15:0`\n#>   <chr>          <dttm>              <chr>      <chr>            <dbl>     <dbl>\n#> 1 001_EQC_TQC p… 2018-04-12 18:28:00 EQC        Vial 2            1532       515\n#> 2 002_EQC_TQC p… 2018-04-12 18:39:00 EQC        Vial 2            1029        NA\n#> 3 003_EQC_TQC p… 2018-04-12 18:51:00 EQC        Vial 2             685       649\n#> 4 004_EQC_TQC p… 2018-04-12 19:02:00 EQC        Vial 2            1283       576\n#> 5 005_EQC_TQC p… 2018-04-12 19:13:00 EQC        Vial 2             946       732\n#> 6 006_EBLK_Extr… 2018-04-12 19:25:00 PBLK       P1-A1              132        NA\n#> # … with 209 more rows, and 426 more variables: `CE 16:0` <dbl>,\n#> #   `CE 16:1` <dbl>, `CE 16:2` <lgl>, `CE 17:0` <dbl>, `CE 17:1` <dbl>,\n#> #   `CE 18:0` <dbl>, `CE 18:1` <dbl>, `CE 18:1 d7 (ISTD)` <dbl>, …"
  },
  {
    "objectID": "import_data.html#other-considerations",
    "href": "import_data.html#other-considerations",
    "title": "2  Import data into R",
    "section": "2.6 Other Considerations",
    "text": "2.6 Other Considerations\n\nWhite spaces or double spaces, White spaces before or after text fields can (and often will) cause issues downstream, therefore I suggest to trim whitespaces, e.g. by setting trim_ws = TRUE"
  },
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "3  Tables in R",
    "section": "",
    "text": "In this chapter we will look at how data is used and managed within R.\n\n\n\nlibrary(here)\nlibrary(tidyverse)\n\n\nBaseggplot2\n\n\n\nplot(cars)\n\n\n\n\n\n\n\nggplot(data = cars, aes(x = speed, y = dist)) + geom_point()"
  },
  {
    "objectID": "tables.html#important-r-data-formats",
    "href": "tables.html#important-r-data-formats",
    "title": "3  Tables in R",
    "section": "3.2 Important R data formats",
    "text": "3.2 Important R data formats\n\n\n\n\n\n\n\n\nType\nDescription\nExample(s)\n\n\n\n\nVector\nVector (series) of values. All values are of the same data type (see below)\nc(1,2,3,4)c(\"TQC\", \"BQC\", \"SPL\")c(TRUE, FALSE)\n\n\nMatrix\n2-dimensional set of values. All values are of the same data type\nmatrix(data = c(1:2),nrow = 2,ncol = 3)matrix(data = c(\"BQC\", \"SPL\"),nrow = 2,ncol = 3)\n\n\nData Frame\nTibble\nTable with columns that can have different data types\ntibble(   No = c(1,2,3),    Sample = c(\"SPL_1\", \"SPL_2\", \"SPL_3\"))\n\n\nList\nSeries of objects\nlist(   Studysite = c(\"NUH\", \"SGH\"),   Cohort =      tibble(No = c(1,2),             Size = c(110,332)   ))"
  },
  {
    "objectID": "tables.html#important-r-data-types",
    "href": "tables.html#important-r-data-types",
    "title": "3  Tables in R",
    "section": "3.3 Important R data types",
    "text": "3.3 Important R data types\n\n\n\n\n\n\n\n\n\nType\nShort\nDescription\nExample(s)\n\n\n\n\nNumeric (double)\n<dbl>\nFloating point number\n3.14159\n\n\nCharacter\n<char>\nCharacter (text) string\n\"S1P d18:1\", \"BQC\"\n\n\nLogical\n<lgl>\nTrue or False, 1 or 0\nTRUE; FALSE\n\n\nInteger\n<int>\nNumber without digits\n3L; 7011L; -13L\n\n\nFactor\n<fct>\nCategorical data\nBQC; TQC; SPL\n\n\n\nMoreover there are data and time types, i.e. date <dt>, time <tm> and datetime <dttm>\nYou can print tables in the console or in R notebook (.Rmd), which will also show the column types:"
  },
  {
    "objectID": "datawrangling.html#introduction",
    "href": "datawrangling.html#introduction",
    "title": "4  Select and plot",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nIn this chapter we will look at how read data from files into R ### Prerequisites\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SLINGtools)"
  },
  {
    "objectID": "datawrangling.html#import-an-agilent-masshunter-csv-file",
    "href": "datawrangling.html#import-an-agilent-masshunter-csv-file",
    "title": "4  Select and plot",
    "section": "4.2 Import an Agilent MassHunter CSV file",
    "text": "4.2 Import an Agilent MassHunter CSV file\n\ndata_file_path <- here(\"data/Testdata_Lipidomics_MHQuant_Detailed_V2.csv\")\n\nd_orig <- read_MassHunterCSV(data_file_path)\n\n#> Reading 'Testdata_Lipidomics_MHQuant_Detailed_V2.csv' ... \n#> \nindexing Testdata_Lipidomics_MHQuant_Detailed_V2.csv [======] 2.15GB/s, eta:  0s\n                                                                                \nImported  215 samples with 428 transitions\n\nprint(d_orig)\n\n#> # A tibble: 92,020 × 14\n#>   DataFileName      DataName SampleType AcqTimeStamp        VialPosition Feature\n#>   <chr>             <chr>    <chr>      <dttm>              <chr>        <chr>  \n#> 1 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 14:0\n#> 2 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 15:0\n#> 3 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:0\n#> 4 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:1\n#> 5 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 16:2\n#> 6 001_EQC_TQC prer… 001_EQC… EQC        2018-04-12 18:28:00 Vial 2       CE 17:0\n#> # … with 92,014 more rows, and 8 more variables: IonPolarity <fct>,\n#> #   PrecursorMZ <dbl>, ProductMZ <dbl>, CollisionEnergy <dbl>, RT <dbl>,\n#> #   Area <dbl>, FWHM <dbl>, MI <lgl>"
  },
  {
    "objectID": "datawrangling.html#select-remove-re-order-and-rename-columns",
    "href": "datawrangling.html#select-remove-re-order-and-rename-columns",
    "title": "4  Select and plot",
    "section": "4.3 Select, remove, re-order, and rename columns",
    "text": "4.3 Select, remove, re-order, and rename columns\nUse the function select()\n\nd <- d_orig |> \n  dplyr::select(AnalysisID = \"DataFileName\", \n                QCtype = SampleType,\n                Compound = Feature, \n                Intensity = Area,\n                RT,\n                PrecursorMZ)\nprint(d)\n\n#> # A tibble: 92,020 × 6\n#>   AnalysisID              QCtype Compound Intensity    RT PrecursorMZ\n#>   <chr>                   <chr>  <chr>        <dbl> <dbl>       <dbl>\n#> 1 001_EQC_TQC prerun 01.d EQC    CE 14:0       1532  6.98        615.\n#> 2 001_EQC_TQC prerun 01.d EQC    CE 15:0        515  7.13        629.\n#> 3 001_EQC_TQC prerun 01.d EQC    CE 16:0     127953  7.16        643.\n#> 4 001_EQC_TQC prerun 01.d EQC    CE 16:1      40374  7.00        641.\n#> 5 001_EQC_TQC prerun 01.d EQC    CE 16:2       1340  6.82        639.\n#> 6 001_EQC_TQC prerun 01.d EQC    CE 17:0       7227  7.22        657.\n#> # … with 92,014 more rows"
  },
  {
    "objectID": "datawrangling.html#filter-rows",
    "href": "datawrangling.html#filter-rows",
    "title": "4  Select and plot",
    "section": "4.4 Filter rows",
    "text": "4.4 Filter rows\nUse the function filter().\n\nd |> filter(AnalysisID == \"149_BQC_PQC17.d \")\nd |> filter(AnalysisID == \"149-bQC_PQC17.d\", Compound == \"TG 48:1 [-18:1]\")\nd |> filter(QCtype == \"BQC\")\nd |> filter(QCtype == \"BQC\" | QCtype == \"TQC\" )\nd |> filter(QCtype == \"BQC\" & QCtype == \"TQC\" )\nd |> filter(QCtype %in% c(\"BQC\", \"TQC\"))"
  },
  {
    "objectID": "datawrangling.html#lets-finally-plot",
    "href": "datawrangling.html#lets-finally-plot",
    "title": "4  Select and plot",
    "section": "4.5 Let’s finally plot",
    "text": "4.5 Let’s finally plot\n\n# For this we take one single sample, let's say a  BQC\nd_plot <- d |> \n  filter(AnalysisID == \"066_BQC_PQC07.d\")\n\n# Base R\nplot(x = d_plot$PrecursorMZ, y = d_plot$RT)\n\n# ggplot\nggplot(d_plot, aes(x = PrecursorMZ, y = RT)) +\n  geom_point(size = 2, color = \"blue\")\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#split-column-to-get-lipid-class",
    "href": "datawrangling.html#split-column-to-get-lipid-class",
    "title": "4  Select and plot",
    "section": "4.6 Split column to get lipid class",
    "text": "4.6 Split column to get lipid class\n\nd_plot_wclass <- d_plot |> \n  separate(\n    col = Compound,\n    into = c(\"lipidclass\", \"chain\"), \n    sep = \" \",\n    extra = \"merge\", \n    remove = FALSE) \n    \nd_plot_wclass\n\n#> # A tibble: 428 × 8\n#>   AnalysisID      QCtype Compound lipidclass chain Intensity    RT PrecursorMZ\n#>   <chr>           <chr>  <chr>    <chr>      <chr>     <dbl> <dbl>       <dbl>\n#> 1 066_BQC_PQC07.d BQC    CE 14:0  CE         14:0       1152  6.98        615.\n#> 2 066_BQC_PQC07.d BQC    CE 15:0  CE         15:0        984  7.06        629.\n#> 3 066_BQC_PQC07.d BQC    CE 16:0  CE         16:0      93268  7.16        643.\n#> 4 066_BQC_PQC07.d BQC    CE 16:1  CE         16:1      51054  7.01        641.\n#> 5 066_BQC_PQC07.d BQC    CE 16:2  CE         16:2       1870  6.83        639.\n#> 6 066_BQC_PQC07.d BQC    CE 17:0  CE         17:0       9050  7.22        657.\n#> # … with 422 more rows"
  },
  {
    "objectID": "datawrangling.html#now-lets-plot-again",
    "href": "datawrangling.html#now-lets-plot-again",
    "title": "4  Select and plot",
    "section": "4.7 Now let’s plot again",
    "text": "4.7 Now let’s plot again\n\n# ggplot\nggplot(d_plot_wclass, aes(x = PrecursorMZ, y = RT, color = lipidclass)) +\n  geom_point(size = 2)\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#another-time",
    "href": "datawrangling.html#another-time",
    "title": "4  Select and plot",
    "section": "4.8 … another time",
    "text": "4.8 … another time\n\n# ggplot\nggplot(d_plot_wclass, aes(x = PrecursorMZ, y = RT, color = lipidclass, size = Intensity/10)) +\n  geom_point()\n\n#> Warning: Removed 2 rows containing missing values (geom_point)."
  },
  {
    "objectID": "datawrangling.html#comparisons-in-r",
    "href": "datawrangling.html#comparisons-in-r",
    "title": "4  Select and plot",
    "section": "4.9 Comparisons in R",
    "text": "4.9 Comparisons in R\nRun following lines and try understand the result\n\n\"CE 18:1\" == \"CE 18:1\"\n\"CE 18:1\" == \"CE 18:1 \"\n\"CE 18:1\" == \"CE  18:1\"\n\"Ce 18:1\" == \"CE 18:1\"\n\nstringr::str_trim(\"CE 18:1 \")\nstringr::str_trim(\"   CE    18:1 \")\nstringr::str_squish(\"   CE    18:1 \")\n\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"IS\")\nstringr::str_detect(\"LPC 18:1 (ISTD)\", pattern = \"IS\")\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"ISTD\")\nstringr::str_detect(\"LPC 18:1 (IS)\", pattern = \"LPC\")\n\nstringr::str_replace(\"Acylcarnitine 18:1\", \n                     pattern = \"Acylcarnitine\",\n                     replacement = \"CAR\")\n\nstringr::str_replace(\"TG 48:2 [SIM] Results\", \n                     pattern = \" Results\",\n                     replacement = \"\")\n\nstringr::str_replace(\"112_BQC_A9334.d\", \n                     pattern = \".d\",\n                     replacement = \"\")\n\nstringr::str_to_lower(\"CE 18:1\")\n\nSample_ID <- 1\ntry(Sample-ID <- 1)\n\n# d |> filter(AnalysisID == \"149_BQC_PQC17.d\", \n#                    str_detect(Compound, \"IS|LPI\") )\n# \n# d |> filter(str_detect(AnalysisID, \"BQC|TQC\") , \n#                    str_detect(Compound, \"IS\")) -> temp"
  },
  {
    "objectID": "datawrangling.html#convert-long-table-to-wide-table-format",
    "href": "datawrangling.html#convert-long-table-to-wide-table-format",
    "title": "4  Select and plot",
    "section": "4.10 Convert long table to wide table format",
    "text": "4.10 Convert long table to wide table format\n\n# d_area_temp <- d |> \n#   pivot_wider(names_from = \"Compound\" ,values_from = \"Area\")\n\n\n# d_BQC <- d_area |> filter(QCtype == \"BQC\")\n# \n# \n# d_res1 <- d_BQC |>\n#   summarise(\n#     across(.cols = -seq_no:-AcqTimeStamp,\n#            .fns = ~ sd(.)/mean(.)*100)\n#   )\n# d_res1\n# \n# d_BQC_areas <- d_BQC |> dplyr::select(-seq_no:-AcqTimeStamp)\n\n# d_res2 <- purrr::map_df(d_BQC_areas, .f = ~ sd(.)/mean(.)*100)\n# d_res2\n# \n# d_res3 <- sapply(X = d_BQC_areas, \n#                  FUN = function(x) c(CV = sd(x)/mean(x) * 100,\n#                                      RobustCV = mad(x)/median(x) * 100))\n# as.data.frame(d_res3)\n# as.data.frame(t(d_res3))\n# \n# d_BQC_long <- d_BQC |> pivot_longer(cols = -seq_no:-AcqTimeStamp,\n#                                     names_to = \"Compound\",\n#                                     values_to = \"Area\")\n# \n# d_BQC_stats <- d_BQC_long |> \n#   group_by(Compound) |> \n#   summarise(\n#     count = n(),\n#     Mean = mean(Area),\n#     Min = min(Area),\n#     CV = sd(Area)/mean(Area) *100,\n#     logCV = sqrt(exp(1)^(sd(log(Area))^2)-1) *100,\n#     logCV_roche = sqrt(10^(log(10)*sd(log(Area, 10))^2)-1) *100,\n#     rCVq = 0.75 * IQR(Area, na.rm = TRUE)/median(Area) *100,\n#     rCVm = mad(Area, constant = 1.4826)/median(Area) *100\n#   )\n# d_BQC_stats\n# \n# hist(d_BQC_stats$CV)\n# hist(d_BQC_stats$rCVm)\n# \n# ggplot(d_BQC_stats) +\n#   geom_histogram(aes(x=CV))\n# \n# d_BQC_stats_long <- d_BQC_stats |>\n#   dplyr:::select(Compound, CV,rCVm,,rCVq, logCV) |> \n#   pivot_longer(cols = -Compound, names_to= \"CV_type\" ,values_to = \"Value\")\n# d_BQC_stats_long\n# \n# ggplot(d_BQC_stats_long) +\n#   geom_histogram(aes(x=Value, fill = CV_type)) + scale_x_continuous(limits = c(0,150)) + facet_wrap(~CV_type)\n# \n# \n# plot(d_BQC_stats$CV, d_BQC_stats$logCV)\n# plot(d_BQC_stats$CV, d_BQC_stats$logCV, xlim = c(0,100), ylim = c(0,100))\n# plot(d_BQC_stats$CV, d_BQC_stats$rCVm)\n# plot(d_BQC_stats$logCV, d_BQC_stats$rCVm, xlim = c(0,200))\n# plot(d_BQC_stats$CV, d_BQC_stats$rCVq)"
  },
  {
    "objectID": "dilution_series.html#libraries",
    "href": "dilution_series.html#libraries",
    "title": "5  Multivariate Regression",
    "section": "5.1 Libraries",
    "text": "5.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(broom)"
  },
  {
    "objectID": "dilution_series.html#overview-lm-and-broom-package",
    "href": "dilution_series.html#overview-lm-and-broom-package",
    "title": "5  Multivariate Regression",
    "section": "5.2 Overview lm and ‘broom’ package",
    "text": "5.2 Overview lm and ‘broom’ package\n\nd_test <- tibble(InjVol = c(0,0.2, 0.4, 0.6, 0.8,1),\n                  Response  = c(12, 23, 34,44, 89, 101)) \n                 \nd_test\n\n#> # A tibble: 6 × 2\n#>   InjVol Response\n#>    <dbl>    <dbl>\n#> 1    0         12\n#> 2    0.2       23\n#> 3    0.4       34\n#> 4    0.6       44\n#> 5    0.8       89\n#> 6    1        101\n\n# Linear model\nmodel <- lm(formula = Response ~ InjVol, data = d_test)\n\n# Get result summary\nsummary(model)\n\n#> \n#> Call:\n#> lm(formula = Response ~ InjVol, data = d_test)\n#> \n#> Residuals:\n#>        1        2        3        4        5        6 \n#>   8.1429   0.4857  -7.1714 -15.8286  10.5143   3.8571 \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)   \n#> (Intercept)    3.857      8.043   0.480  0.65656   \n#> InjVol        93.286     13.282   7.024  0.00216 **\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 11.11 on 4 degrees of freedom\n#> Multiple R-squared:  0.925,  Adjusted R-squared:  0.9062 \n#> F-statistic: 49.33 on 1 and 4 DF,  p-value: 0.002165\n\n# Get r^2 only\nsummary(model)$r.squared\n\n#> [1] 0.9249954\n\n# Using broom::glance \nbroom::glance(model) \n\n#> # A tibble: 1 × 12\n#>   r.squared adj.r.squared sigma statistic p.value    df logLik   AIC   BIC\n#>       <dbl>         <dbl> <dbl>     <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n#> 1     0.925         0.906  11.1      49.3 0.00216     1  -21.7  49.5  48.9\n#> # … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n\nbroom::tidy(model) \n\n#> # A tibble: 2 × 5\n#>   term        estimate std.error statistic p.value\n#>   <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n#> 1 (Intercept)     3.86      8.04     0.480 0.657  \n#> 2 InjVol         93.3      13.3      7.02  0.00216"
  },
  {
    "objectID": "dilution_series.html#import-datasets",
    "href": "dilution_series.html#import-datasets",
    "title": "5  Multivariate Regression",
    "section": "5.3 Import Datasets",
    "text": "5.3 Import Datasets\n\nd_orig <- read_csv(here(\"data/Testdata_Lipidomics_flat_wide_annotated_V1.csv\"))"
  },
  {
    "objectID": "dilution_series.html#prepare-data",
    "href": "dilution_series.html#prepare-data",
    "title": "5  Multivariate Regression",
    "section": "5.4 Prepare Data",
    "text": "5.4 Prepare Data\n\n# Convert to long format\nd_wide  <- d_orig |> dplyr::select(-AcqTimeStamp, -VialPosition)\n\nd_long <- d_wide |> \n  pivot_longer(cols = -DataFileName:-InjVol, names_to = \"Compound\" , values_to = \"Area\")\n\nd_rqc <- d_long |> filter(QCtype == \"RQC\")"
  },
  {
    "objectID": "dilution_series.html#run-regression-for-each-lipid",
    "href": "dilution_series.html#run-regression-for-each-lipid",
    "title": "5  Multivariate Regression",
    "section": "5.5 Run regression for each lipid",
    "text": "5.5 Run regression for each lipid\nIn this example a logistic regression is used. The output of glm() is converted to a tidy table using the broom::tidy() function.\n\nmodel <- as.formula(\"Area ~ InjVol\")\n\nd_res <- d_rqc %>%\n  group_by(Compound) %>%\n  nest() %>%\n  mutate(\n    models = map(data, function(x) lm(model, data = x)), \n    tidy = map(models, function(x) broom::glance(x))) |> \n  unnest(tidy) |> \n  dplyr::select(-data, -models)\n\nThe results contain the combined estimates, errors, and P values for each term for each lipid species.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompound\nr.squared\nadj.r.squared\nsigma\nstatistic\np.value\ndf\nlogLik\nAIC\nBIC\ndeviance\ndf.residual\nnobs\n\n\n\n\nCE 14:0\n0.637155\n0.614477\n391.7204\n28.09596\n0.000072\n1\n-131.9507\n269.9014\n272.5725\n2.455118e+06\n16\n18\n\n\nCE 15:0\n0.540688\n0.511981\n253.5177\n18.83469\n0.000507\n1\n-124.1187\n254.2373\n256.9084\n1.028340e+06\n16\n18\n\n\nCE 16:0\n0.626274\n0.602917\n44054.0359\n26.81215\n0.000092\n1\n-216.9579\n439.9159\n442.5870\n3.105213e+10\n16\n18\n\n\nCE 16:1\n0.834197\n0.823834\n8622.1216\n80.50006\n0.000000\n1\n-187.5984\n381.1968\n383.8679\n1.189456e+09\n16\n18\n\n\nCE 16:2\n0.609873\n0.585490\n585.7358\n25.01226\n0.000131\n1\n-139.1925\n284.3850\n287.0561\n5.489383e+06\n16\n18\n\n\nCE 17:0\n0.900585\n0.894371\n1178.0217\n144.94082\n0.000000\n1\n-151.7695\n309.5390\n312.2101\n2.220376e+07\n16\n18\n\n\nCE 17:1\n0.945373\n0.941959\n1914.1239\n276.89543\n0.000000\n1\n-160.5071\n327.0142\n329.6854\n5.862192e+07\n16\n18\n\n\nCE 18:0\n0.952998\n0.950061\n8748.1092\n324.41314\n0.000000\n1\n-187.8595\n381.7190\n384.3902\n1.224471e+09\n16\n18\n\n\nCE 18:1\n0.944273\n0.940791\n522750.3432\n271.11631\n0.000000\n1\n-261.4843\n528.9686\n531.6397\n4.372287e+12\n16\n18\n\n\nCE 18:1 d7 (ISTD)\n0.922337\n0.917483\n60313.2929\n190.01887\n0.000000\n1\n-222.6124\n451.2248\n453.8959\n5.820309e+10\n16\n18"
  },
  {
    "objectID": "multiple_models.html#libraries",
    "href": "multiple_models.html#libraries",
    "title": "6  Multivariate Regression",
    "section": "6.1 Libraries",
    "text": "6.1 Libraries\n\nlibrary(here)\nlibrary(tidyverse)\nlibrary(SLINGtools)\nlibrary(broom)"
  },
  {
    "objectID": "multiple_models.html#import-datasets",
    "href": "multiple_models.html#import-datasets",
    "title": "6  Multivariate Regression",
    "section": "6.2 Import Datasets",
    "text": "6.2 Import Datasets\n\nd_meta <- read_csv(here(\"data/ISLS10_Part2_metadata.csv\"))\nd_wide <- read_csv(here(\"data/ISLS10_Part2_lipidomics_curated.csv\"))"
  },
  {
    "objectID": "multiple_models.html#prepare-data",
    "href": "multiple_models.html#prepare-data",
    "title": "6  Multivariate Regression",
    "section": "6.3 Prepare Data",
    "text": "6.3 Prepare Data\n\n# Convert to long format\nd_long <- d_wide |>\n  pivot_longer(cols = -ID, names_to = \"Compound\" , values_to = \"Conc\")\n\n# Combine data and metadata\nd_full <- d_meta |> left_join(d_long, by = \"ID\")\n\n# log-transform and scale (z-score) data\nd_full <- d_full |>\n  group_by(Compound) |>\n  mutate(Conc_log = log2(Conc),\n         Conc_logz = as.numeric(scale(Conc_log)))"
  },
  {
    "objectID": "multiple_models.html#run-regression-for-each-lipid",
    "href": "multiple_models.html#run-regression-for-each-lipid",
    "title": "6  Multivariate Regression",
    "section": "6.4 Run regression for each lipid",
    "text": "6.4 Run regression for each lipid\nIn this example a logistic regression is used. The output of glm() is converted to a tidy table using the broom::tidy() function.\n\nmodel <- as.formula(\"DM ~ Age + Gender + BMI + HbA1c + \n                    SBP + HDL + LDL + TG + Conc_logz\")\n\nd_res <- d_full %>%\n  group_by(Compound) %>%\n  nest() %>%\n  mutate(\n    models = map(data, function(x) glm(model, data = x, family = \"binomial\")), \n    tidy = map(models, function(x) broom::tidy(x))) |> \n  unnest(tidy) |> \n  dplyr::select(-data, -models)\n\nThe results contain the combined estimates, errors, and P values for each term for each lipid species.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompound\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\nCer d16:1/16:0\n(Intercept)\n-20.955219\n1.886056\n-11.110601\n0.000000\n\n\nCer d16:1/16:0\nAge\n0.032885\n0.010896\n3.017987\n0.002545\n\n\nCer d16:1/16:0\nGender\n0.593323\n0.217179\n2.731950\n0.006296\n\n\nCer d16:1/16:0\nBMI\n0.129663\n0.027600\n4.698024\n0.000003\n\n\nCer d16:1/16:0\nHbA1c\n2.041818\n0.281859\n7.244102\n0.000000\n\n\nCer d16:1/16:0\nSBP\n0.017569\n0.005370\n3.271562\n0.001070\n\n\nCer d16:1/16:0\nHDL\n-0.725890\n0.368385\n-1.970465\n0.048785\n\n\nCer d16:1/16:0\nLDL\n-0.247450\n0.128041\n-1.932579\n0.053288\n\n\nCer d16:1/16:0\nTG\n0.402731\n0.142030\n2.835530\n0.004575\n\n\nCer d16:1/16:0\nConc_logz\n0.197851\n0.113746\n1.739413\n0.081962\n\n\n\n\n\nTo get the effects and P values for the lipids we filter for the term Conc_logz. We futhermore get the adjusted P values (FDR).\n\nd_res_lipids <- d_res |> \n   filter(term == \"Conc_logz\") |> \n   mutate(FDR = p.adjust(p.value, method = \"fdr\")) |> \n   arrange(FDR)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompound\nterm\nestimate\nstd.error\nstatistic\np.value\nFDR\n\n\n\n\nSM d16:1/18:0\nConc_logz\n0.408832\n0.119650\n3.416896\n0.000633\n0.000633\n\n\nSM d18:1/18:0\nConc_logz\n0.325500\n0.105045\n3.098661\n0.001944\n0.001944\n\n\nCer d18:0/18:0\nConc_logz\n0.427791\n0.139298\n3.071052\n0.002133\n0.002133\n\n\nHex1Cer d18:2/25:0\nConc_logz\n-0.255110\n0.092979\n-2.743742\n0.006074\n0.006074\n\n\nCer d18:1/18:0\nConc_logz\n0.316480\n0.119278\n2.653288\n0.007971\n0.007971\n\n\nSM d18:1/20:0\nConc_logz\n0.282201\n0.106676\n2.645399\n0.008159\n0.008159"
  },
  {
    "objectID": "multiple_models.html#forest-plot",
    "href": "multiple_models.html#forest-plot",
    "title": "6  Multivariate Regression",
    "section": "6.5 Forest Plot",
    "text": "6.5 Forest Plot\nPrepare data for the plot: get lipid class from lipid names, join it to the data frame, calculate FDR, get upper/lower errors, and set “significant specie”\n\n# lipid annotation\nd_lipid_annot <- d_res_lipids |>\n  select(Compound) |>  \n  separate(Compound, \n           into = c(\"lipid_class\", \"fa_chain\"), \n           remove = FALSE, \n           extra = \"drop\",\n           fill = \"right\",  \n           sep = \"/\" )\n\nd_plot <- d_res_lipids |> \n  full_join(d_lipid_annot, by = \"Compound\") |> \n  mutate(\n    est_low = estimate - std.error,\n    est_high = estimate + std.error, \n    signif = FDR < 0.05,\n    label = if_else(signif, fa_chain, \"\")) |> \n  arrange(signif)\n\nPlot estimates of all lipid species, grouped by lipid class, highlighting significant species in red and label them by the FA chain.\n\nggplot(d_plot, aes(x = lipid_class, y = estimate,color = signif, label = label)) +\n  geom_hline(yintercept = 0) +\n  geom_pointrange(aes(ymin = est_low, ymax = est_high, alpha = signif),\n                  size = 0.5,\n                  position = position_jitter(width = .3, height = 0)) +\n  coord_flip() +\n  scale_color_manual(values = c(\"FALSE\" = \"grey70\", \"TRUE\" = \"red\")) +\n  scale_alpha_manual(values = c(\"FALSE\" = 0.3, \"TRUE\" = 1)) +\n  ggrepel::geom_text_repel(\n    aes(y = estimate),\n    size = 2,\n    max.overlaps = 5,\n    point.padding = .7\n  ) +\n  theme_bw() + \n  theme(legend.position=\"none\")\n\n\n\n\nFigure 1. Forest plot of logistic regression (DM ~ Age + Gender + BMI + HbA1c + SBP + HDL + LDL + TG + Lipid). Species with FDR > 0.05 are highlighted in red."
  }
]